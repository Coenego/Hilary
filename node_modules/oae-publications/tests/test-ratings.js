/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

var PublicationsRatingsAPI = require('oae-publications').Ratings;

describe('Publications - Ratings', function() {

    var camAnonymousRestCtx = null;
    var gtAdminRestCtx = null;
    var camAdminRestCtx = null;
    var globalAdminRestCtx = null;
    var coenegoUser = null;

    /**
     * Generates a random source Id
     *
     * @return {String} A random string that can be used as a source id
     */
    var generateRandomSourceId = function() {
        return 'mendeley#' + TestsUtil.generateRandomText();
    };

    /*!
     * Create some rest contexts that will be used during the tests
     */
    before(function(callback) {
        camAnonymousRestCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestCtx = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        camAdminRestCtx = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        globalAdminRestCtx = TestsUtil.createGlobalAdminRestContext();

        TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, coenego) {
            assert.ok(!err);
            coenegoUser = coenego;
            return callback();
        });
    });

    describe('#ratePublication()', function() {

        /**
         * Test that verifies that valid parameters are passed in
         */
        it('verify parameters', function(callback) {

            // Create a new publication
            RestAPI.Publications.createPublication(coenegoUser.restContext, [generateRandomSourceId], 'displayName A', 'journal article', Date.now(), ['author A'], null, null, function(err, data) {
                assert.ok(!err);
                var publicationId = data.publication.id;

                // Verify that an error is thrown when a malformed publicaiton ID is given
                RestAPI.Publications.ratePublication(coenegoUser.restContext, 'invalid_publication_id', null, function(err) {
                    assert.equal(err.code, 400);

                    // Verify that an error is thrown when a malformed publication ID is given
                    RestAPI.Publications.ratePublication(coenegoUser.restContext, 'p:camtest', null, function(err) {
                        assert.equal(err.code, 400);

                        // Verify that an error is thrown when the rating is empty
                        RestAPI.Publications.ratePublication(coenegoUser.restContext, publicationId, null, function(err) {
                            assert.equal(err.code, 400);

                            // Verify that an error is thrown when the rating is a non-numeric string
                            RestAPI.Publications.ratePublication(coenegoUser.restContext, publicationId, 'invalid_rating', function(err) {
                                assert.equal(err.code, 400);

                                // Verify that an error is thrown when the rating is lower than 1
                                RestAPI.Publications.ratePublication(coenegoUser.restContext, publicationId, 0, function(err) {
                                    assert.equal(err.code, 400);

                                    // Verify that an error is thrown when the rating is higher than 5
                                    RestAPI.Publications.ratePublication(coenegoUser.restContext, publicationId, 6, function(err) {
                                        assert.equal(err.code, 400);

                                        // Verify that an error is thrown when using a non-integer
                                        RestAPI.Publications.ratePublication(coenegoUser.restContext, publicationId, 2.5, function(err) {
                                            assert.equal(err.code, 400);

                                            // Rate a publication using malformed parameters
                                            RestAPI.Publications.ratePublication(coenegoUser.restContext, publicationId, 1, function(err, result) {
                                                assert.ok(!err);
                                                assert.strictEqual(result.rating, 1);
                                                assert.strictEqual(result.ratings, 1);
                                                assert.strictEqual(result.isAllowed, false);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that only existing publications can be rated
         */
        it('verify that only existing publications can be rated', function(callback) {

            // Verify that an error is thrown when an unexisting publication is given
            RestAPI.Publications.ratePublication(coenegoUser.restContext, 'p:camtest:0123456789', 5, function(err) {
                assert.equal(err.code, 404);

                // Create a new publication
                RestAPI.Publications.createPublication(coenegoUser.restContext, [generateRandomSourceId], 'displayName A', 'journal article', Date.now(), ['author A'], null, null, function(err, data) {
                    assert.ok(!err);

                    // Verify that rating an existing publication is successful
                    RestAPI.Publications.ratePublication(coenegoUser.restContext, data.publication.id, 5, function(err, result) {
                        assert.ok(!err);
                        assert.strictEqual(result.rating, 5);
                        assert.strictEqual(result.ratings, 1);
                        assert.strictEqual(result.isAllowed, false);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that only authorized users can rate a publication
         */
         it('verify permissions', function(callback) {

            // Create a new publication
            RestAPI.Publications.createPublication(coenegoUser.restContext, [generateRandomSourceId], 'displayName A', 'journal article', Date.now(), ['author A'], null, null, function(err, data) {
                assert.ok(!err);

                // Verify that anonymous users can't rate a publication
                RestAPI.Publications.ratePublication(camAnonymousRestCtx, data.publication.id, 5, function(err, result) {
                    assert.equal(err.code, 401);

                    // Verify that admins from another tenant can rate the publication
                    RestAPI.Publications.ratePublication(gtAdminRestCtx, data.publication.id, 5, function(err, result) {
                        assert.ok(!err);
                        assert.strictEqual(result.rating, 5);
                        assert.strictEqual(result.ratings, 1);
                        assert.strictEqual(result.isAllowed, false);

                        // Verify that tenant admins can rate a publication
                        RestAPI.Publications.ratePublication(camAdminRestCtx, data.publication.id, 3, function(err, result) {
                            assert.ok(!err);
                            assert.strictEqual(result.rating, 4);
                            assert.strictEqual(result.ratings, 2);
                            assert.strictEqual(result.isAllowed, false);

                            // Verify that regular users can rate a publication
                            RestAPI.Publications.ratePublication(coenegoUser.restContext, data.publication.id, 1, function(err, result) {
                                assert.ok(!err);
                                assert.strictEqual(result.rating, 3);
                                assert.strictEqual(result.ratings, 3);
                                assert.strictEqual(result.isAllowed, false);

                                // Verify that global admins can rate a publication
                                RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
                                    assert.ok(!err);
                                    RestAPI.Publications.ratePublication(ctx, data.publication.id, 1, function(err, result) {
                                        assert.ok(!err);
                                        assert.strictEqual(result.rating, 2.5);
                                        assert.strictEqual(result.ratings, 4);
                                        assert.strictEqual(result.isAllowed, false);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
         });

        /**
         * Test that verifies that publications can be rated successfully
         */
        it('verify that a publication can be rated successfully', function(callback) {

            // Create a new publication
            RestAPI.Publications.createPublication(coenegoUser.restContext, [generateRandomSourceId], 'displayName A', 'journal article', Date.now(), ['author A'], null, null, function(err, data) {
                assert.ok(!err);
                var publicationId = data.publication.id;

                // Rate the created publication
                RestAPI.Publications.ratePublication(coenegoUser.restContext, publicationId, 3, function(err, result) {
                    assert.ok(!err);
                    assert.strictEqual(result.rating, 3);
                    assert.strictEqual(result.ratings, 1);
                    assert.strictEqual(result.isAllowed, false);

                    // Rate the created publication
                    RestAPI.Publications.ratePublication(camAdminRestCtx, publicationId, 2, function(err, result) {
                        assert.ok(!err);
                        assert.strictEqual(result.rating, (3+2)/2);
                        assert.strictEqual(result.ratings, 2);
                        assert.strictEqual(result.isAllowed, false);

                        // Rate the created publication
                        RestAPI.Publications.ratePublication(gtAdminRestCtx, publicationId, 2, function(err, result) {
                            assert.ok(!err);
                            assert.strictEqual(result.rating, (3+2+2)/3);
                            assert.strictEqual(result.ratings, 3);
                            assert.strictEqual(result.isAllowed, false);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a user can rate a publication only once
         */
        it('verify that a publication can only be rated once by the same user', function(callback) {

            // Create a new publication
            RestAPI.Publications.createPublication(coenegoUser.restContext, [generateRandomSourceId], 'displayName A', 'journal article', Date.now(), ['author A'], null, null, function(err, data) {
                assert.ok(!err);
                var publicationId = data.publication.id;

                // Rate the created publication
                RestAPI.Publications.ratePublication(coenegoUser.restContext, publicationId, 3, function(err, result) {
                    assert.ok(!err);
                    assert.strictEqual(result.rating, 3);
                    assert.strictEqual(result.ratings, 1);
                    assert.strictEqual(result.isAllowed, false);

                    // Rate the created publication a second time with the same user
                    RestAPI.Publications.ratePublication(coenegoUser.restContext, publicationId, 1, function(err, result) {
                        assert.equal(err.code, 401);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that the rating is decorated with the rating permissions
         */
        it('verify that the rating object is decorated with the user permissions', function(callback) {

            // Create a new publication
            RestAPI.Publications.createPublication(coenegoUser.restContext, [generateRandomSourceId], 'displayName A', 'journal article', Date.now(), ['author A'], null, null, function(err, data) {
                assert.ok(!err);
                var publicationId = data.publication.id;

                // Rate the created publication
                RestAPI.Publications.ratePublication(coenegoUser.restContext, publicationId, 3, function(err, result) {
                    assert.ok(!err);
                    assert.strictEqual(result.rating, 3);
                    assert.strictEqual(result.ratings, 1);
                    assert.strictEqual(result.isAllowed, false);
                    return callback();
                });
            });
        });
    });

    describe('#getPublication()', function() {

        /**
         * Test that verifies that a publication is decorated with its rating
         */
        it('verify that a publication is decorated with its rating', function(callback) {

            // Create a new publication
            RestAPI.Publications.createPublication(coenegoUser.restContext, [generateRandomSourceId], 'displayName A', 'journal article', Date.now(), ['author A'], null, null, function(err, data) {
                assert.ok(!err);
                var publicationId = data.publication.id;

                // Request the created publication
                RestAPI.Publications.getPublication(coenegoUser.restContext, publicationId, function(err, publication) {
                    assert.ok(!err);
                    assert.ok(publication.rating);
                    assert.equal(publication.rating.rating, 0);
                    assert.equal(publication.rating.ratings, 0);
                    assert.equal(publication.rating.isAllowed, true);
                    assert.equal(publication.rating.publicationId, publicationId);

                    // Rate the created publication
                    RestAPI.Publications.ratePublication(coenegoUser.restContext, publicationId, 4, function(err, result) {
                        assert.ok(!err);
                        assert.strictEqual(result.rating, 4);
                        assert.strictEqual(result.ratings, 1);
                        //assert.strictEqual(result.isAllowed, false);
                        //assert.strictEqual(result.publicationId, publicationId);

                        // Request the created publication
                        RestAPI.Publications.getPublication(coenegoUser.restContext, publicationId, function(err, publication) {
                            assert.ok(!err);
                            assert.strictEqual(publication.rating.rating, 4);
                            assert.strictEqual(publication.rating.ratings, 1);
                            assert.strictEqual(publication.rating.isAllowed, false);
                            assert.strictEqual(publication.rating.publicationId, publicationId);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that each publication of a collection is decorated with its rating
         */
        it('verify that each publication of a collection is decorated with its rating', function(callback) {
            return callback();
        });
    });
});
