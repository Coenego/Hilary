/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var SearchAPI = require('oae-search');
var SearchTestsUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests/lib/util');

var DepartmentsRestAPI = require('../lib/test/util');

describe('Departments', function() {

    var anonymousCamRestContext = null;
    var anonymousGlobalRestContext = null;
    var camUserRestContext = null;
    var camAdminRestContext = null;
    var gtAdminRestContext = null;
    var globalAdminRestContext = null;

    /**
     * Create rest contexts that can be used while running tests
     */
    before(function(callback) {

        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        anonymousGlobalRestContext = TestsUtil.createGlobalRestContext();
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

        // Generate a Cambridge user
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, user) {
            camUserRestContext = user.restContext;
            return callback();
        });
    });

    /**
     * Utility method that returns a stream that points to a CSV file
     *
     * @return {Stream}                     A stream that points to a CSV file that can be uploaded
     */
    var getFileStreamA = function() {
        var file = __dirname + '/data/departmentsA.csv';
        return fs.createReadStream(file);
    };

    /**
     * Utility method that returns a stream that points to a CSV file
     *
     * @return {Stream}                     A stream that points to a CSV file that can be uploaded
     */
    var getFileStreamB = function() {
        var file = __dirname + '/data/departmentsB.csv';
        return fs.createReadStream(file);
    };

    describe('Import departments', function() {

        /**
         * Test that verifies that parameters are verified when importing departments
         */
        it('verify parameters', function(callback) {

            // Verify parameter validation on the tenant router
            DepartmentsRestAPI.importDepartments(camAdminRestContext, null, function(err) {
                assert.equal(err.code, 400);

                DepartmentsRestAPI.importDepartments(camAdminRestContext, [], function(err) {
                    assert.equal(err.code, 400);

                    DepartmentsRestAPI.importDepartments(camAdminRestContext, {}, function(err) {
                        assert.equal(err.code, 400);

                        // Verify parameter validation on the global admin router
                        DepartmentsRestAPI.importDepartments(globalAdminRestContext, null, function(err) {
                            assert.equal(err.code, 400);

                            DepartmentsRestAPI.importDepartments(globalAdminRestContext, [], function(err) {
                                assert.equal(err.code, 400);

                                DepartmentsRestAPI.importDepartments(globalAdminRestContext, {}, function(err) {
                                    assert.equal(err.code, 400);

                                    // Verify that an error is thrown when no tenant alias was specified on the global admin router
                                    DepartmentsRestAPI.importDepartments(globalAdminRestContext, {'departments': getFileStreamA}, function(err) {
                                        assert.equal(err.code, 400);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that only authorized admins/users can import departments
         */
        it('verify permissions', function(callback) {
            DepartmentsRestAPI.importDepartments(anonymousGlobalRestContext, {'departments': getFileStreamA}, function(err) {
                assert.equal(err.code, 400);

                DepartmentsRestAPI.importDepartments(anonymousCamRestContext, {'departments': getFileStreamA}, function(err) {
                    assert.equal(err.code, 401);

                    DepartmentsRestAPI.importDepartments(camUserRestContext, {'departments': getFileStreamA}, function(err) {
                        assert.equal(err.code, 401);

                        DepartmentsRestAPI.importDepartments(camAdminRestContext, {'departments': getFileStreamA}, function(err) {
                            assert.ok(!err);

                            DepartmentsRestAPI.importDepartments(globalAdminRestContext, {'tenantAlias': global.oaeTests.tenants.cam.alias, 'departments': getFileStreamA}, function(err) {
                                assert.ok(!err);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that importing departments is successful
         */
        it('verify importing departments is successful', function(callback) {
            var tenantAlias = TestsUtil.generateRandomText(1);
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenantAdminRestContext) {
                assert.ok(!err);

                // Ensure that no results are found when performing a search
                SearchTestsUtil.searchRefreshed(tenantAdminRestContext, 'departments', null, {'q': 'Institute'}, function(err, data) {
                    assert.ok(!err);
                    assert.equal(data.total, 0);
                    assert.equal(data.results.length, 0);

                    // Import a CSV file for the created tenant
                    DepartmentsRestAPI.importDepartments(tenantAdminRestContext, {'departments': getFileStreamA}, function(err) {
                        assert.ok(!err);

                        // Ensure the imported departments are found when performing a search
                        SearchTestsUtil.searchRefreshed(tenantAdminRestContext, 'departments', null, {'q': 'Institute'}, function(err, data) {
                            assert.ok(!err);
                            assert.ok(data.total);
                            assert.ok(_.isArray(data.results));
                            _.each(data.results, function(department) {
                                assert.equal(department.resourceType, 'department');
                            });
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that importing the same CSV file twice on the same tenant doesn't result in having duplicates in the search results
         */
        it('verify that importing the same CSV file doesn\'t result in having duplicates', function(callback) {
            var tenantAlias = TestsUtil.generateRandomText(1);
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenantAdminRestContext) {
                assert.ok(!err);

                // Ensure that no results are found when performing a search
                SearchTestsUtil.searchRefreshed(tenantAdminRestContext, 'departments', null, {'q': 'Institute'}, function(err, data) {
                    assert.ok(!err);
                    assert.equal(data.total, 0);
                    assert.equal(data.results.length, 0);

                    // Import a CSV file for the created tenant
                    DepartmentsRestAPI.importDepartments(tenantAdminRestContext, {'departments': getFileStreamA}, function(err) {
                        assert.ok(!err);

                        // Ensure the imported departments are found when performing a search
                        SearchTestsUtil.searchRefreshed(tenantAdminRestContext, 'departments', null, {'q': 'Institute'}, function(err, data1) {
                            assert.ok(!err);
                            assert.ok(data1.total);
                            assert.ok(data1.results.length);

                            // Import the same CSV file for the created tenant
                            DepartmentsRestAPI.importDepartments(tenantAdminRestContext, {'departments': getFileStreamA}, function(err) {
                                assert.ok(!err);

                                // Ensure the departments can still be found when performing a search, without duplicates
                                SearchTestsUtil.searchRefreshed(tenantAdminRestContext, 'departments', null, {'q': 'Institute'}, function(err, data2) {
                                    assert.ok(!err);
                                    assert.ok(data2.total);
                                    assert.ok(data2.results.length);
                                    assert.equal(data1.total, data2.total);
                                    assert.equal(data1.results.length, data2.results.length);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that imported departments are not searchable in other tenants
         */
        it('verify that imported departments are not searchable in other tenants', function(callback) {
            var tenantAlias1 = TestsUtil.generateRandomText(1);
            TestsUtil.createTenantWithAdmin(tenantAlias1, tenantAlias1, function(err, tenant1, tenant1AdminRestContext) {
                assert.ok(!err);

                // Ensure that no results are found when performing a search on the first tenant
                SearchTestsUtil.searchRefreshed(tenant1AdminRestContext, 'departments', null, {'q': 'Institute'}, function(err, data) {
                    assert.ok(!err);
                    assert.equal(data.total, 0);
                    assert.equal(data.results.length, 0);

                    // Create a second tenant
                    var tenantAlias2 = TestsUtil.generateRandomText(1);
                    TestsUtil.createTenantWithAdmin(tenantAlias2, tenantAlias2, function(err, tenant2, tenant2AdminRestContext) {
                        assert.ok(!err);

                        // Ensure that no results are found when performing a search on the second tenant
                        SearchTestsUtil.searchRefreshed(tenant2AdminRestContext, 'departments', null, {'q': 'Division'}, function(err, data) {
                            assert.ok(!err);
                            assert.equal(data.total, 0);
                            assert.equal(data.results.length, 0);

                            // Import a CSV file for the first created tenant
                            DepartmentsRestAPI.importDepartments(tenant1AdminRestContext, {'departments': getFileStreamA}, function(err) {
                                assert.ok(!err);

                                // Import a CSV file for the second created tenant
                                DepartmentsRestAPI.importDepartments(tenant2AdminRestContext, {'departments': getFileStreamB}, function(err) {
                                    assert.ok(!err);

                                    // Search for the imported departments from the second tenant
                                    SearchTestsUtil.searchRefreshed(tenant1AdminRestContext, 'departments', null, {}, function(err, data1) {
                                        assert.ok(!err);
                                        // Assert that none of tenant2's departments are returned.
                                        _.each(data1.results, function(department) {
                                            assert.equal(department.displayName.indexOf('Department'), -1);
                                        });

                                        // Search for the imported departments form the first tenants
                                        SearchTestsUtil.searchRefreshed(tenant2AdminRestContext, 'departments', null, {}, function(err, data2) {
                                            assert.ok(!err);
                                            // Assert that none of tenant1's departments are returned.
                                            _.each(data2.results, function(department) {
                                                assert.equal(department.displayName.indexOf('Institute'), -1);
                                            });
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that imported departments are bound to tenants and have a tenant-bound identifier in their ID
         */
        it('verify that imported departments have a specific, tenant-bound identifier', function(callback) {
            var tenantAlias1 = TestsUtil.generateRandomText(1);
            TestsUtil.createTenantWithAdmin(tenantAlias1, tenantAlias1, function(err, tenant1, tenant1AdminRestContext) {
                assert.ok(!err);

                // Ensure that no results are found when performing a search on the first tenant
                SearchTestsUtil.searchRefreshed(tenant1AdminRestContext, 'departments', null, {'q': 'Institute'}, function(err, data) {
                    assert.ok(!err);
                    assert.equal(data.total, 0);
                    assert.equal(data.results.length, 0);

                    // Create a second tenant
                    var tenantAlias2 = TestsUtil.generateRandomText(1);
                    TestsUtil.createTenantWithAdmin(tenantAlias2, tenantAlias2, function(err, tenant2, tenant2AdminRestContext) {
                        assert.ok(!err);

                        // Ensure that no results are found when performing a search on the second tenant
                        SearchTestsUtil.searchRefreshed(tenant2AdminRestContext, 'departments', null, {'q': 'Division'}, function(err, data1) {
                            assert.ok(!err);
                            assert.equal(data1.total, 0);
                            assert.equal(data1.results.length, 0);

                            // Import a CSV file for the first created tenant
                            DepartmentsRestAPI.importDepartments(tenant1AdminRestContext, {'departments': getFileStreamA}, function(err) {
                                assert.ok(!err);

                                // Search for the imported departments and ensure that they have a wellformed identifier
                                SearchTestsUtil.searchRefreshed(tenant1AdminRestContext, 'departments', null, {'q': 'Institute'}, function(err, data1) {
                                    assert.ok(!err);
                                    assert.ok(data1.results);
                                    _.each(data1.results, function(department) {
                                        assert.equal(department.id.split(':')[0], 'd');
                                        assert.equal(department.id.split(':')[1], tenantAlias1);
                                        assert.equal(department.resourceType, 'department');
                                    });

                                    // Import a CSV file for the second created tenant
                                    DepartmentsRestAPI.importDepartments(tenant2AdminRestContext, {'departments': getFileStreamB}, function(err) {
                                        assert.ok(!err);

                                        // Search for the imported departments and ensure that they have a wellformed identifier
                                        SearchTestsUtil.searchRefreshed(tenant2AdminRestContext, 'departments', null, {'q': 'Division'}, function(err, data1) {
                                            assert.ok(!err);
                                            assert.ok(data1.results);
                                            _.each(data1.results, function(department) {
                                                assert.equal(department.id.split(':')[0], 'd');
                                                assert.equal(department.id.split(':')[1], tenantAlias2);
                                                assert.equal(department.resourceType, 'department');
                                            });
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
