/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var crypto = require('crypto');
var Mixpanel = require('mixpanel');
var MixpanelExporter = require('mixpanel-data-export');
var moment = require('moment');

var exporter = null;

/**
 * Initialize mixpanel event tracking
 *
 * @param  {Object}     config      An object containing the full system configuration (i.e., `config.js`)
 */
var init = module.exports.init = function(_config) {
    config = _config;

    if (config.mixpanel && config.mixpanel.enabled) {
        // Initialize a client
        var client = Mixpanel.init(config.mixpanel.token);

        // Create a new exporter
        exporter = new MixpanelExporter({
            'api_key': config.mixpanel.apikey,
            'api_secret': config.mixpanel.apisecret
        });

        // Register all the listeners
        _registerListeners(client, config);
    }
};

/**
 * Get the unique user count stats for the current month
 *
 * @param  {Context}    ctx                 Standard context object containing the current user and the current tenant
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {Object}     callback.stats      Object containing the stats for the tenant(s)
 */
var getUniqueUsers = module.exports.getUniqueUsers = function(ctx, callback) {
    if (ctx.user() && !ctx.user().isAdmin()) {
        return callback({'code': 401, 'msg': 'Only administrators can request stats'});
    }

    // Request options object
    var data = {
        'from_date': _getStartDate(Date.now()),
        'to_date': moment.utc(Date.now()).format('YYYY-MM-DD'),
        'event': 'userLoggedOut',
        'on': 'properties["tenant"]',
        'type': 'unique'
    };

    // Return the unique users for a specific tenant if the endpoint was accessed on the tenant router
    if (ctx.tenant().alias !== 'admin') {
        data = _.extend(data, {
            'where': '"' + ctx.tenant().alias + '" == properties["tenant"]'
        });
    }

    // Request the data from the MixPanel API
    exporter.segmentation(data, function(data) {
        if (data.error) {
            return callback({'code': 400, 'msg': data.error})
        }

        return callback(null, data);
    });
};

/**
 * Get the unique user count for the current month for a specific tenant
 *
 * @param  {Context}    ctx                 Standard context object containing the current user and the current tenant
 * @param  {String}     alias               The alias of the tenant to get the stats for
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {Object}     callback.stats      Object containing the stats for the tenant
 */
var getUniqueUsersForTenant = module.exports.getUniqueUsersForTenant = function(ctx, alias, callback) {
    if (ctx.user() && !ctx.user().isAdmin()) {
        return callback({'code': 401, 'msg': 'Only administrators can request stats'});
    }

    // Perform some basic validation
    var validator = new Validator();
    validator.check(alias, {'code': 400, 'msg': 'Missing alias'}).notEmpty();
    validator.check(alias, {'code': 400, 'msg': 'The tenant alias should not contain a space'}).notContains(' ');
    validator.check(alias, {'code': 400, 'msg': 'The tenant alias should not contain a colon'}).notContains(':');
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Request options object
    var data = {
        'from_date': _getStartDate(Date.now()),
        'to_date': moment.utc(Date.now()).format('YYYY-MM-DD'),
        'event': 'userLoggedIn',
        'on': 'properties["tenant"]',
        'where': '"' + alias + '" == properties["tenant"]',
        'type': 'unique'
    };

    // Request the data from the MixPanel API
    exporter.segmentation(data, function(data) {
        if (data.error) {
            return callback({'code': 400, 'msg': data.error})
        }

        return callback(null, data);
    });
};

/**
 * Return the start date
 *
 * @param  {Date}       [date]      The current date
 * @return {String}                 The start date in ISO 8601 format (e.g. 2015-07-01)
 * @api private
 */
var _getStartDate = function(date) {
    date = date || Date.now();
    var day = parseInt(moment(date).date(), 10);
    return moment(date).subtract({'days': day - 1}).utc().format('YYYY-MM-DD');
};

/**
 * Register the event listeners that will track each event with mixpanel
 *
 * @param  {Mixpanel}       client      A mixpanel client
 * @param  {Object}         object      An object containing the full system configuration (i.e., `config.js`)
 * @api private
 */
var _registerListeners = function(client, config) {
    require('./eventlisteners/activity')(client, config);
    require('./eventlisteners/authentication')(client, config);
    require('./eventlisteners/content')(client, config);
    require('./eventlisteners/discussions')(client, config);
    require('./eventlisteners/folders')(client, config);
    require('./eventlisteners/following')(client, config);
    require('./eventlisteners/groups')(client, config);
    require('./eventlisteners/search')(client, config);
    require('./eventlisteners/users')(client, config);
};
