/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');

var Locking = require('oae-util/lib/locking');
var Publication = require('oae-publications/lib/model').Publication;
var PublicationsAPI = require('oae-publications');
var PublicationsConstants = require('oae-publications/lib/constants').PublicationsConstants;
var PublicationsDAO = require('oae-publications/lib/internal/dao');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');
var PublicationsRestAPI = require('oae-publications/lib/test/util');

var TicketsAPI = require('../lib/api');
var TicketsConstants = require('../lib/constants').TicketsConstants;
var TicketsDAO = require('../lib/internal/dao');
var TicketsRestAPI = require('../lib/test/util');
var TicketsUtil = require('../lib/util');

describe('Tickets', function() {

    // Rest context that can be used every time we need to make a reqeust as a global admin
    var globalAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a cam tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a gt tenant admin
    var gtAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // User object that can be used every time we need user specific data
    var coenegoUser = null;
    var halUser = null;

    /**
     * Initializes the admin/user REST contexts
     */
    before(function(callback) {

        // Fill up the global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        // Fill up the cam admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the gt admin rest context
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        // Fill up the anonymous rest context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the coenego and hal user rest context
        TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, camUsers, _coenegoUser, _halUser) {
            assert.ok(!err);
            coenegoUser = _coenegoUser;
            halUser = _halUser;
            return callback();
        });
    });

    /**
     * Generates a random source Id
     *
     * @return {String} A random string that can be used as a source id
     */
    var generateRandomSourceId = function() {
        return 'mendeley#' + TestsUtil.generateRandomText();
    };

    /**
     * Utility method that returns a stream that points to a PDF
     *
     * @return {Stream}     A stream that points to a PDF that can be uploaded
     */
    var getFileStream = function() {
        var file = __dirname + '/data/paper.pdf';
        return fs.createReadStream(file);
    };

    /**
     * Utility method that checks if the requested ticket corresponds with the created publication's ticket
     *
     * @param  {Publication}    createdPublication          Object representing a publication that was created
     * @param  {Ticket}         createdPublication.ticket   Object representing a ticket that was created
     * @param  {Ticket}         returnedTicket              Object representing a ticket that was requested
     * @return {Error}                                      An assertion error is thrown if the `returnedTicket` is not associated with the `createdPublication`
     */
    var isCorrespondingTicket = function(createdPublication, returnedTicket) {
        assert.ok(returnedTicket);
        assert.ok(createdPublication);
        assert.strictEqual(createdPublication.id, returnedTicket.publicationId);
        assert.strictEqual(createdPublication.ticket.status, returnedTicket.status);
        assert.strictEqual(createdPublication.ticket.created, returnedTicket.created);
        assert.strictEqual(createdPublication.ticket.createdBy, returnedTicket.createdBy);
        assert.strictEqual(createdPublication.ticket.ticketId, returnedTicket.ticketId);
        assert.strictEqual(createdPublication.ticket.externalId, returnedTicket.externalId);
        assert.strictEqual(createdPublication.ticket.status, TicketsConstants.statusses.NEW);
    };

    /**
     * Utility method that checks if a valid ticket is returned
     *
     * @param  {Ticket}         ticket                      Object representing a ticket that was requested
     * @return {Error}                                      An assertion error is thrown if the tickets values are invalid
     */
    var isValidTicket = function(ticket) {
        assert.ok(TicketsUtil.isTicketId(ticket.ticketId));
        assert.ok(TicketsUtil.isExternalId(ticket.externalId));
    };

    describe('#createTicket()', function() {

        /**
         * Test that verifies an error is thrown when entering an invalid publication ID
         */
        it('verify parameters', function(callback) {

            // Create a new ticket with an invalid publication ID
            TicketsRestAPI.createTicket(camAdminRestContext, {'publicationId': 'invalid_publication_id'}, function(err, ticket) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!ticket);

                // Create a new ticket with an unexisting publication ID
                TicketsRestAPI.createTicket(camAdminRestContext, {'publicationId': 'p:camtest:0123456789'}, function(err, ticket) {
                    assert.ok(err);
                    assert.equal(err.code, 404);
                    assert.ok(!ticket);
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that creating tickets is only allowed when enabled
         */
        it('verify permissions', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, camUser) {
                assert.ok(!err);

                // Create a new publication
                var tenantAlias = global.oaeTests.tenants.cam.alias;
                var publication = new Publication(null, tenantAlias, coenegoUser.user.id, null, 'DisplayName', PublicationsConstants.publicationTypes.OTHER, Date.now(), null, ['author A', halUser.user.id, 'author B']);
                PublicationsDAO.createPublication(tenantAlias, publication, [generateRandomSourceId()], function(err, publication) {
                    assert.ok(!err);

                    // Create a ticket with an anonymous user
                    TicketsRestAPI.createTicket(anonymousRestContext, {'publicationId': publication.id}, function(err, ticket) {
                        assert.equal(err.code, 401);
                        assert.ok(!ticket);

                        // Create a ticket with a registered user that doesn't have anything to do with the publication
                        TicketsRestAPI.createTicket(camUser.restContext, {'publicationId': publication.id}, function(err, ticket) {
                            assert.equal(err.code, 401);
                            assert.ok(!ticket);

                            // Create a ticket with an admin from an other tenant
                            publication = new Publication(null, tenantAlias, coenegoUser.user.id, null, 'DisplayName A', PublicationsConstants.publicationTypes.OTHER, Date.now(), null, ['author A', 'author B']);
                            PublicationsDAO.createPublication(tenantAlias, publication, [generateRandomSourceId()], function(err, publication) {
                                assert.ok(!err);
                                TicketsRestAPI.createTicket(gtAdminRestContext, {'publicationId': publication.id}, function(err, ticket) {
                                    assert.equal(err.code, 401);

                                    // Create a ticket with the creator of the publication
                                    publication = new Publication(null, tenantAlias, coenegoUser.user.id, null, 'DisplayName B', PublicationsConstants.publicationTypes.OTHER, Date.now(), null, ['author A']);
                                    PublicationsDAO.createPublication(tenantAlias, publication, [generateRandomSourceId()], function(err, publication) {
                                        assert.ok(!err);
                                        TicketsRestAPI.createTicket(coenegoUser.restContext, {'publicationId': publication.id}, function(err, ticket) {
                                            assert.ok(!err);
                                            assert.ok(ticket);
                                            publication.ticket = ticket;
                                            isValidTicket(ticket);
                                            isCorrespondingTicket(publication, ticket);

                                            // Create a ticket with one of the authors of the publication
                                            publication = new Publication(null, tenantAlias, coenegoUser.user.id, null, 'DisplayName C', PublicationsConstants.publicationTypes.OTHER, Date.now(), null, [halUser.user.id, 'author A', 'author B']);
                                            PublicationsDAO.createPublication(tenantAlias, publication, [generateRandomSourceId()], function(err, publication) {
                                                assert.ok(!err);
                                                TicketsRestAPI.createTicket(halUser.restContext, {'publicationId': publication.id}, function(err, ticket) {
                                                    assert.ok(!err);
                                                    assert.ok(ticket);
                                                    publication.ticket = ticket;
                                                    isValidTicket(ticket);
                                                    isCorrespondingTicket(publication, ticket);

                                                    // Create a ticket with one of the authors of the publication
                                                    publication = new Publication(null, tenantAlias, coenegoUser.user.id, null, 'DisplayName D', PublicationsConstants.publicationTypes.OTHER, Date.now(), null, [halUser.user.id, 'author A', 'author B']);
                                                    PublicationsDAO.createPublication(tenantAlias, publication, [generateRandomSourceId()], function(err, publication) {
                                                        assert.ok(!err);
                                                        TicketsRestAPI.createTicket(camAdminRestContext, {'publicationId': publication.id}, function(err, ticket) {
                                                            assert.ok(!err);
                                                            assert.ok(ticket);
                                                            publication.ticket = ticket;
                                                            isValidTicket(ticket);
                                                            isCorrespondingTicket(publication, ticket);

                                                            // Create a ticket with the global admin
                                                            RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
                                                                assert.ok(!err);
                                                                publication = new Publication(null, tenantAlias, coenegoUser.user.id, null, 'DisplayName E', PublicationsConstants.publicationTypes.OTHER, Date.now(), null, [halUser.user.id, 'author A', 'author B']);
                                                                PublicationsDAO.createPublication(tenantAlias, publication, [generateRandomSourceId()], function(err, publication) {
                                                                    assert.ok(!err);
                                                                    TicketsRestAPI.createTicket(ctx, {'publicationId': publication.id}, function(err, ticket) {
                                                                        assert.ok(!err);
                                                                        assert.ok(ticket);
                                                                        publication.ticket = ticket;
                                                                        isValidTicket(ticket);
                                                                        isCorrespondingTicket(publication, ticket);
                                                                        return callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that attempting to create a ticket when the key is already locked results in an error
         */
        it('verify that creating a ticket when the key is already locked results in an error', function(callback) {

            // Create a first tenant
            var tenantAlias = TestsUtil.generateRandomText(1);
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenantAdminRestContext) {
                assert.ok(!err);

                // Create a new publication first, since we need this to create a ticket
                var publication = new Publication(null, tenantAlias, coenegoUser.user.id, null, 'DisplayName', PublicationsConstants.publicationTypes.OTHER, Date.now(), null, ['author A', halUser.user.id, 'author B']);
                PublicationsDAO.createPublication(tenantAlias, publication, [generateRandomSourceId()], function(err, publication) {
                    assert.ok(!err);

                    // Add some dummy data to mock an attached ticket
                    publication.ticket = {'status': TicketsConstants.statusses.NEW};

                    // Lock the key to create a new ticket
                    var key = util.format('oae-tickets:counter:%s', tenantAlias);
                    Locking.acquire(key, 15, function(err, lockToken) {
                        assert.ok(!err);
                        assert.ok(lockToken);

                        // Attempting to create a ticket while the key is already locked should result in an error
                        TicketsRestAPI.createTicket(tenantAdminRestContext, {'publicationId': publication.id}, function(err, ticket) {
                            assert.ok(err);
                            assert.equal(err.code, 400);
                            assert.equal(err.msg, 'Unable to create ticket for publication');
                            assert.ok(!ticket);

                            // Unlock the key again
                            Locking.release(key, lockToken, function(err, hadLock) {
                                assert.ok(!err);
                                assert.ok(hadLock);

                                // Attempting to create a ticket while the key is available should return a ticket
                                TicketsRestAPI.createTicket(tenantAdminRestContext, {'publicationId': publication.id}, function(err, ticket) {
                                    assert.ok(!err);
                                    assert.ok(ticket);
                                    publication.ticket.tenantAlias = 'localhost';
                                    isValidTicket(ticket);
                                    assert.strictEqual(ticket.externalId, 'OA-1');
                                    assert.strictEqual(ticket.publicationId, publication.id);
                                    publication.ticket = ticket;
                                    isCorrespondingTicket(publication, ticket);

                                    // Locking the key should be possible since it's release when a ticket is created
                                    Locking.acquire(key, 15, function(err, lockToken) {
                                        assert.ok(!err);
                                        assert.ok(lockToken);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies uploading an article creates a new ticket
         */
        it('verify creating a new publication creates a new ticket', function(callback) {

            // Create a new publication
            PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                assert.ok(!err);
                assert.ok(data.publication);
                assert.ok(data.publication.ticket);
                isValidTicket(data.publication.ticket);
                isCorrespondingTicket(data.publication, data.publication.ticket);
                return callback();
            });
        });

        /**
         * Test that verifies that creating tickets on different tenants doesn't cause conflits with the external ID's
         */
        it('verify creating tickets on different tenants doesn\'t cause conflicts with the external ID\'s', function(callback) {

            // Create a first tenant
            var tenantAlias = TestsUtil.generateRandomText(1);
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenant1AdminRestContext) {
                assert.ok(!err);

                // Create a new publication in the first tenant
                PublicationsRestAPI.createPublication(tenant1AdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.id], null, null, function(err, data1, result) {
                    assert.ok(!err);
                    assert.ok(data1.publication);
                    assert.strictEqual(data1.publication.ticket.externalId, 'OA-1');

                    // Create a second tenant
                    tenantAlias = TestsUtil.generateRandomText(1);
                    TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenant2AdminRestContext) {
                        assert.ok(!err);

                        // Create a new publication in the second tenant
                        PublicationsRestAPI.createPublication(tenant2AdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.id], null, null, function(err, data2, result) {
                            assert.ok(!err);
                            assert.ok(data2.publication);
                            assert.strictEqual(data1.publication.ticket.externalId, 'OA-1');

                            // Both the tickets should have 'OA-1' as external ID, since tickets are tenant bound and have a separate counter
                            assert.strictEqual(data1.publication.ticket.externalId, data2.publication.ticket.externalId);

                            // Create a second publication in the first tenant
                            PublicationsRestAPI.createPublication(tenant1AdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.id], null, null, function(err, data1, result) {
                                assert.ok(!err);
                                assert.ok(data1.publication);
                                assert.strictEqual(data1.publication.ticket.externalId, 'OA-2');

                                // Create a second publication in the second tenant
                                PublicationsRestAPI.createPublication(tenant2AdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.id], null, null, function(err, data2, result) {
                                    assert.ok(!err);
                                    assert.ok(data2.publication);
                                    assert.strictEqual(data2.publication.ticket.externalId, 'OA-2');

                                    // Both the tickets should have 'OA-2' as external ID, since tickets are tenant bound and have a separate counter
                                    assert.strictEqual(data1.publication.ticket.externalId, data2.publication.ticket.externalId);

                                    // Create a third tenant
                                    var tenantAlias = TestsUtil.generateRandomText(1);
                                    TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenant3AdminRestContext) {
                                        assert.ok(!err);

                                        // Create a new publication in the third tenant
                                        PublicationsRestAPI.createPublication(tenant3AdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.id], null, null, function(err, data, result) {
                                            assert.ok(!err);
                                            assert.ok(data.publication);
                                            assert.strictEqual(data.publication.ticket.externalId, 'OA-1');
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#deleteTicket()', function() {

        /**
         * Test that verifies if a valid ticket ID is specified
         */
        it('verify parameters', function(callback) {

            // Delete a ticket by a malformed ID
            RestAPI.Tickets.deleteTicket(camAdminRestContext, 'invalid_ticket_id', function(err) {
                assert.equal(err.code, 400);

                // Delete a ticket by a malformed ID
                RestAPI.Tickets.deleteTicket(camAdminRestContext, 't:camtest', function(err) {
                    assert.equal(err.code, 400);

                    // Delete a ticket by a malformed ID
                    RestAPI.Tickets.deleteTicket(camAdminRestContext, coenegoUser.user.id, function(err) {
                        assert.equal(err.code, 400);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that only authorized users are allowed to delete a ticket
         */
        it('verify permissions', function(callback) {


            // Create a new publication
            RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                assert.ok(!err);
                assert.ok(data.publication.ticket);
                var ticket = data.publication.ticket;

                // Verify that an anonymous user is not allowed to delete a ticket
                RestAPI.Tickets.deleteTicket(anonymousRestContext, ticket.ticketId, function(err) {
                    assert.equal(err.code, 401);

                    // Verify that a random, registered user is not allowed to delete a ticket
                    RestAPI.Tickets.deleteTicket(coenegoUser.restContext, ticket.ticketId, function(err) {
                        assert.equal(err.code, 401);

                        // Verify that tenant admins are allowed to delete a ticket
                        RestAPI.Tickets.deleteTicket(gtAdminRestContext, ticket.ticketId, function(err) {
                            assert.equal(err.code, 401);

                            // Verify that tenant admins are allowed to delete a ticket
                            RestAPI.Tickets.deleteTicket(camAdminRestContext, ticket.ticketId, function(err, deletedTicket) {
                                assert.ok(!err);
                                assert.ok(deletedTicket);
                                assert.strictEqual(deletedTicket.ticketId, ticket.ticketId);

                                // Create a new publication, since the previous one was deleted
                                RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                                    assert.ok(!err);
                                    assert.ok(data.publication.ticket);
                                    ticket = data.publication.ticket;

                                    // Verify that global admins are allowed to delete a ticket
                                    RestAPI.Admin.loginOnTenant(globalAdminRestContext, 'localhost', function(err, ctx) {
                                        assert.ok(!err);
                                        RestAPI.Tickets.deleteTicket(ctx, ticket.ticketId, function(err, deletedTicket) {
                                            assert.ok(!err);
                                            assert.ok(deletedTicket);
                                            assert.strictEqual(deletedTicket.ticketId, ticket.ticketId);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that only existing tickets can be deleted
         */
        it('verify that only existing tickets can be deleted', function(callback) {

            // Verify that deleting an unexisting ticket results in an error
            RestAPI.Tickets.deleteTicket(camAdminRestContext, 't:camtest:0123456789', function(err) {
                assert.equal(err.code, 404);

                // Create a new publication
                RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication.ticket);

                    // Verify that deleting an unexisting ticket results in an error
                    RestAPI.Tickets.deleteTicket(camAdminRestContext, data.publication.ticket.ticketId, function(err, deletedTicket) {
                        assert.ok(!err);
                        assert.ok(deletedTicket);
                        assert.strictEqual(deletedTicket.ticketId, data.publication.ticket.ticketId);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a ticket has been successfully deleted
         */
        it('verify that a ticket can be deleted successfully', function(callback) {

            // Create a new publication
            RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                assert.ok(!err);
                assert.ok(data.publication.ticket);

                // Verify that deleting an unexisting ticket results in an error
                RestAPI.Tickets.deleteTicket(camAdminRestContext, data.publication.ticket.ticketId, function(err, deletedTicket) {
                    assert.ok(!err);
                    assert.ok(deletedTicket);
                    assert.strictEqual(deletedTicket.ticketId, data.publication.ticket.ticketId);

                    // Requesting the deleted ticket should result in an error
                    TicketsAPI.getTicket(data.publication.ticket.ticketId, function(err, ticket) {
                        assert.equal(err.code, 404);

                        // The publication should now come without a decorated ticket
                        RestAPI.Publications.getPublication(camAdminRestContext, data.publication.id, function(err, publication) {
                            assert.ok(!err);
                            assert.ok(!publication.ticket);
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('#updateTicket', function() {

        /**
         * Test that verifies that valid parameters are specified
         */
        it('verify parameters', function(callback) {

            // Create a new publication
            RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                assert.ok(!err);
                var createdTicket = data.publication.ticket;

                // Try to update the ticket by passing in a malformed ticket id
                TicketsAPI.updateTicket(null, null, function(err, ticket) {
                    assert.equal(err.code, 400);

                    // Try to update the ticket by passing in a malformed ticket id
                    TicketsAPI.updateTicket({}, null, function(err, ticket) {
                        assert.equal(err.code, 400);

                        // Try to update the ticket by passing in a malformed ticket id
                        TicketsAPI.updateTicket([], null, function(err, ticket) {
                            assert.equal(err.code, 400);

                            // Try to update the ticket by passing in a malformed ticket id
                            TicketsAPI.updateTicket('invalid_ticket_id', null, function(err, ticket) {
                                assert.equal(err.code, 400);

                                // Try to update the ticket by passing in a malformed ticket id
                                TicketsAPI.updateTicket('t:camtest', null, function(err, ticket) {
                                    assert.equal(err.code, 400);

                                    // Try to update the ticket by passing in invalid or malformed updates
                                    TicketsAPI.updateTicket(createdTicket.ticketId, null, function(err, ticket) {
                                        assert.equal(err.code, 400);

                                        // Try to update the ticket by passing in invalid or malformed updates
                                        TicketsAPI.updateTicket(createdTicket.ticketId, {}, function(err, ticket) {
                                            assert.equal(err.code, 400);

                                            // Try to update the ticket by passing in invalid or malformed updates
                                            TicketsAPI.updateTicket(createdTicket.ticketId, [], function(err, ticket) {
                                                assert.equal(err.code, 400);

                                                // Try to update the ticket by passing in invalid or malformed updates
                                                TicketsAPI.updateTicket(createdTicket.ticketId, 'invalid_updates', function(err, ticket) {
                                                    assert.equal(err.code, 400);

                                                    // Try to update the ticket by passing in invalid or malformed updates
                                                    TicketsAPI.updateTicket(createdTicket.ticketId, {'foo': 'bar'}, function(err, ticket) {
                                                        assert.equal(err.code, 400);

                                                        // Try to update the ticket by passing in a combination of valid and invalid updates
                                                        TicketsAPI.updateTicket(createdTicket.ticketId, {'status': TicketsConstants.statusses.CLOSED, 'foo': 'bar'}, function(err, ticket) {
                                                            assert.ok(!err);
                                                            assert.ok(ticket);
                                                            assert.ok(!ticket.foo);
                                                            assert.strictEqual(ticket.status, TicketsConstants.statusses.CLOSED);
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that only an existing ticket can be updated
         */
        it('verify only an existing ticket can be updated', function(callback) {

            // Try to update the ticket by passing in an unexisting ticket id
            TicketsAPI.updateTicket('t:camtest:0123456789', {'status': TicketsConstants.statusses.CLOSED}, function(err, ticket) {
                assert.equal(err.code, 404);
                assert.ok(!ticket);
                return callback();
            });
        });

        /**
         * Test that verifies that updating a ticket is successful
         */
        it('verify updating a ticket is successful', function(callback) {

            // Create a new publication
            RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                assert.ok(!err);
                var createdTicket = data.publication.ticket;

                // Try to update the ticket by passing in invalid or malformed updates
                TicketsAPI.updateTicket(createdTicket.ticketId, {'status': TicketsConstants.statusses.CLOSED}, function(err, ticket) {
                    assert.ok(!err);
                    assert.ok(ticket);
                    assert.strictEqual(ticket.status, TicketsConstants.statusses.CLOSED);

                    // Request the ticket
                    RestAPI.Publications.getPublication(camAdminRestContext, data.publication.id, function(err, publication) {
                        assert.ok(!err);
                        assert.strictEqual(publication.ticket.status, TicketsConstants.statusses.CLOSED);
                        return callback();
                    });
                });
            });
        });
    });

    describe('#getTicket()', function() {

        /**
         * Test that verifies if a valid ticket ID is specified
         */
        it('verify parameters', function(callback) {

            // Create a new publication
            PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                assert.ok(!err);
                assert.ok(data.publication);
                assert.ok(data.publication.ticket);
                var createdPublication = data.publication;

                // Requesting a ticket with an empty identifier should return an error
                TicketsAPI.getTicket(null, function(err, ticket) {
                    assert.equal(err.code, 400);
                    assert.ok(!ticket);

                    // Requesting a ticket with a mallformed identifier should return an error
                    TicketsAPI.getTicket('invalid_ticket_id', function(err, ticket) {
                        assert.equal(err.code, 400);
                        assert.ok(!ticket);

                        // Requesting a ticket with a invalid identifier datatype should return an error
                        TicketsAPI.getTicket({'ticketId': 't:camtest:0123456789'}, function(err, ticket) {
                            assert.equal(err.code, 400);
                            assert.ok(!ticket);

                            // Requesting a ticket with an unexisting identifier should return an error
                            TicketsAPI.getTicket('t:camtest:0123456789', function(err, ticket) {
                                assert.equal(err.code, 404);
                                assert.ok(!ticket);

                                // Requesting a ticket with a valid, existing identifier should return a ticket
                                TicketsAPI.getTicket(createdPublication.ticket.ticketId, function(err, ticket) {
                                    assert.ok(!err);
                                    assert.ok(ticket);
                                    isValidTicket(ticket);
                                    isCorrespondingTicket(createdPublication, ticket);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies requesting a specific ticket is successful
         */
        it('verify requesting an existig ticket is successful', function(callback) {

            // Create a new publication
            PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                assert.ok(!err);
                assert.ok(data.publication);
                assert.ok(data.publication.ticket);

                // Request the created ticket
                TicketsAPI.getTicket(data.publication.ticket.ticketId, function(err, ticket) {
                    assert.ok(!err);
                    isValidTicket(ticket);
                    isCorrespondingTicket(data.publication, ticket);
                    return callback();
                });
            });
        });

        /**
         * Test that verifies requesting a ticket by a publication ID is successful
         */
        it('verify requesting a ticket by a publication ID is successful', function(callback) {

            // Create a new publication
            PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                assert.ok(!err);
                assert.ok(data.publication);
                assert.ok(data.publication.ticket);

                // Request the ticket by the publication ID
                TicketsDAO.getTicketsByPublicationIds([data.publication.id], function(err, tickets) {
                    assert.ok(!err);
                    assert.equal(tickets.length, 1);
                    isValidTicket(tickets[0]);
                    isCorrespondingTicket(data.publication, tickets[0]);
                    return callback();
                });
            });
        });
    });

    describe('#getTickets()', function() {

        /**
         * Test that verifies that valid parameters are specified when requesting multiple tickets
         */
        it('verify parameters', function(callback) {

            // Store the created tickets locally to compare them afterwards
            var createdTickets = [];

            // Create a new publication
            PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                assert.ok(!err);
                assert.ok(data.publication);
                assert.ok(data.publication.ticket);
                createdTickets.push(data.publication.ticket);

                // Create a new publication
                PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication);
                    assert.ok(data.publication.ticket);
                    createdTickets.push(data.publication.ticket);

                    // Store the created ticket ID's
                    var ticketIds = _.map(createdTickets, function(ticket) { return ticket.ticketId; });

                    // Request tickets with a null object
                    TicketsAPI.getTickets(null, function(err, tickets) {
                        assert.equal(err.code, 400);
                        assert.ok(!tickets);

                        // Request tickets with an invalid data type
                        TicketsAPI.getTickets('invalid_datatype', function(err, tickets) {
                            assert.equal(err.code, 400);
                            assert.ok(!tickets);

                            // Request tickets with an invalid data type
                            TicketsAPI.getTickets({}, function(err, tickets) {
                                assert.equal(err.code, 400);
                                assert.ok(!tickets);

                                // Request tickets with an invalid data type
                                TicketsAPI.getTickets([], function(err, tickets) {
                                    assert.equal(err.code, 400);
                                    assert.ok(!tickets);

                                    // Request tickets with a single ID
                                    TicketsAPI.getTickets(ticketIds[0], function(err, tickets) {
                                        assert.ok(!err);
                                        assert.ok(tickets);

                                        // Request tickets with an arrya of ID's
                                        TicketsAPI.getTickets(ticketIds, function(err, tickets) {
                                            assert.ok(!err);
                                            assert.ok(tickets);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that requesting a collection of tickets by their ID is successful
         */
        it('verify requesting a collection of tickets by their ID is successful', function(callback) {

            // Store the created tickets locally to compare them afterwards
            var createdTickets = [];

            // Create a new publication
            PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                assert.ok(!err);
                assert.ok(data.publication);
                assert.ok(data.publication.ticket);
                createdTickets.push(data.publication.ticket);

                // Create a new publication
                PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication);
                    assert.ok(data.publication.ticket);
                    createdTickets.push(data.publication.ticket);

                    // Create a new publication
                    PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                        assert.ok(!err);
                        assert.ok(data.publication);
                        assert.ok(data.publication.ticket);
                        createdTickets.push(data.publication.ticket);

                        var ticketIds = _.map(createdTickets, function(ticket) { return ticket.ticketId; });
                        TicketsAPI.getTickets(ticketIds, function(err, tickets) {
                            assert.ok(!err);
                            assert.ok(tickets);

                            // Loop the returned tickets and check if their values match to the created tickets
                            _.each(tickets, function(ticket, i) {
                                assert.deepEqual(ticket, createdTickets[i]);
                                assert.equal(tickets.length, createdTickets.length);
                                assert.equal(ticket.ticketId, createdTickets[i].ticketId);
                            });
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies requesting a ticket by a publication ID is successful
         */
        it('verify requesting multiple tickets by their linked publication ID\'s is successful', function(callback) {

            // Store the created tickets locally to compare them afterwards
            var createdPublications = [];

            // Create a new publication
            PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                assert.ok(!err);
                assert.ok(data.publication);
                createdPublications.push(data.publication);

                // Create a new publication
                PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication);
                    createdPublications.push(data.publication);

                    // Request the tickets by their linked publication ID's
                    var publicationIds = _.map(createdPublications, function(publication) { return publication.id; });
                    TicketsDAO.getTicketsByPublicationIds(publicationIds, function(err, tickets) {
                        assert.ok(!err);
                        assert.equal(tickets.length, 2);
                        _.each(tickets, function(ticket) {
                            var createdPublication = _.find(createdPublications, function(createdPublication) { return createdPublication.id === ticket.publicationId; });
                            assert.ok(createdPublication);
                            isValidTicket(ticket);
                            isCorrespondingTicket(createdPublication, ticket);
                        });
                        return callback();
                    });
                });
            });
        });
    });

    describe('#getPublicationsById()', function() {

        /**
         * Test that verifies that requesting a publication by its ID is only decorated with its corresponding ticket for authorized users
         */
        it('verify that a requested publication by its ID is only decorated with its corresponding ticket for authorized users', function(callback) {

            // Create a new user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, camUser) {
                assert.ok(!err);

                // Create a new publication
                PublicationsRestAPI.createPublication(camUser.restContext, [generateRandomSourceId()], 'displayName A', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [halUser.user.id], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication);
                    var createdPublication = data.publication;

                    // A requested publication should come WITHOUT a ticket when using the anonymous user
                    PublicationsRestAPI.getPublication(anonymousRestContext, data.publication.id, function(err, publication) {
                        assert.ok(!err);
                        assert.ok(!publication.ticket);

                        // A requested publication should come WITHOUT a ticket when an admin from another tenant
                        PublicationsRestAPI.getPublication(gtAdminRestContext, data.publication.id, function(err, publication) {
                            assert.ok(!err);
                            assert.ok(!publication.ticket);

                            // A requested publication should come WITHOUT a ticket when using a user that hasn't anything to do with the publication
                            PublicationsRestAPI.getPublication(coenegoUser.restContext, data.publication.id, function(err, publication) {
                                assert.ok(!err);
                                assert.ok(!publication.ticket);

                                // A requested publication should come WITH a ticket when using the creator
                                PublicationsRestAPI.getPublication(camUser.restContext, data.publication.id, function(err, publication) {
                                    assert.ok(!err);
                                    isValidTicket(publication.ticket);
                                    isCorrespondingTicket(createdPublication, publication.ticket);

                                    // A requested publication should come WITH a ticket when using the author
                                    PublicationsRestAPI.getPublication(halUser.restContext, data.publication.id, function(err, publication) {
                                        assert.ok(!err);
                                        isValidTicket(publication.ticket);
                                        isCorrespondingTicket(createdPublication, publication.ticket);

                                        // A requested publication should come WITH a ticket when using the tenant admin
                                        PublicationsRestAPI.getPublication(camAdminRestContext, data.publication.id, function(err, publication) {
                                            assert.ok(!err);
                                            isValidTicket(publication.ticket);
                                            isCorrespondingTicket(createdPublication, publication.ticket);

                                            // A requested publication should come WITH a ticket when using the global admin
                                            RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
                                                assert.ok(!err);
                                                PublicationsRestAPI.getPublication(ctx, data.publication.id, function(err, publication) {
                                                    assert.ok(!err);
                                                    isValidTicket(publication.ticket);
                                                    isCorrespondingTicket(createdPublication, publication.ticket);
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a requested publication is decorated with its corresponding ticket
         */
        it('verify that a requested publication is decorated with its corresponding ticket', function(callback) {

            // Create a new publication
            PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.id], null, null, function(err, data, result) {
                assert.ok(!err);
                assert.ok(data.publication);
                assert.ok(data.publication.ticket);
                var createdPublication = data.publication;

                // Request the created publication
                PublicationsRestAPI.getPublication(camAdminRestContext, data.publication.id, function(err, publication) {
                    assert.ok(!err);
                    isValidTicket(publication.ticket);
                    isCorrespondingTicket(createdPublication, publication.ticket);
                    return callback();
                });
            });
        });
    });


    describe('#getPublicationsByAuthor()', function() {

        /**
         * Test that verifies that requesting a set of publications are decorated with their corresponding tickets
         */
        it('verify that requested publications by author are only decorated with their corresponding ticket for authorized users', function(callback) {

            // Create a new user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, camUser) {
                assert.ok(!err);

                // Store the created publications
                var createdPublications = [];

                // Create a new publication
                PublicationsRestAPI.createPublication(camUser.restContext, [generateRandomSourceId()], 'displayName A', PublicationsConstants.publicationTypes.OTHER, 1388676959000, ['author A'], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication);
                    createdPublications.push(data.publication);

                    // Create a new publication
                    PublicationsRestAPI.createPublication(camUser.restContext, [generateRandomSourceId()], 'displayName B', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [camUser.user.id], null, null, function(err, data, result) {
                        assert.ok(!err);
                        assert.ok(data.publication);
                        createdPublications.push(data.publication);

                        // Create a new publication
                        PublicationsRestAPI.createPublication(camUser.restContext, [generateRandomSourceId()], 'displayName C', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [camUser.user.id], null, null, function(err, data, result) {
                            assert.ok(!err);
                            assert.ok(data.publication);
                            createdPublications.push(data.publication);

                            // Requesting the publications with the Cam user as an author should be decorated with their corresponding tickets when using the anonymous user
                            PublicationsRestAPI.getPublications(anonymousRestContext, camUser.user.id, null, null, function(err, data) {
                                assert.ok(!err);
                                assert.equal(data.results.length, 2);
                                _.each(data.results, function(publication) {
                                    assert.ok(!publication.ticket);
                                });

                                // Requesting the publications with the Cam user as an author should be decorated with their corresponding tickets when using the GT tenant admin
                                PublicationsRestAPI.getPublications(gtAdminRestContext, camUser.user.id, null, null, function(err, data) {
                                    assert.ok(!err);
                                    assert.equal(data.results.length, 2);
                                    _.each(data.results, function(publication) {
                                        assert.ok(!publication.ticket);
                                    });

                                    // Requesting the publications with the Cam user as an author should NOT be decorated with their corresponding tickets when using the Hal user
                                    PublicationsRestAPI.getPublications(halUser.restContext, camUser.user.id, null, null, function(err, data) {
                                        assert.ok(!err);
                                        assert.equal(data.results.length, 2);
                                        _.each(data.results, function(publication) {
                                            assert.ok(!publication.ticket);
                                        });

                                        // Requesting the publications with the Cam user as an author should be decorated with their corresponding tickets when using the Cam user
                                        PublicationsRestAPI.getPublications(camUser.restContext, camUser.user.id, null, null, function(err, data) {
                                            assert.ok(!err);
                                            assert.equal(data.results.length, 2);
                                            _.each(data.results, function(publication) {
                                                var createdPublication = _.find(createdPublications, function(createdPublication) { return createdPublication.id === publication.id; });
                                                assert.ok(createdPublication);
                                                isValidTicket(publication.ticket);
                                                isCorrespondingTicket(createdPublication, publication.ticket);
                                            });

                                            // Requesting the publications with the Cam user as an author should be decorated with their corresponding tickets when using the tenant admin
                                            PublicationsRestAPI.getPublications(camAdminRestContext, camUser.user.id, null, null, function(err, data) {
                                                assert.ok(!err);
                                                assert.equal(data.results.length, 2);
                                                _.each(data.results, function(publication) {
                                                    var createdPublication = _.find(createdPublications, function(createdPublication) { return createdPublication.id === publication.id; });
                                                    assert.ok(createdPublication);
                                                    isValidTicket(publication.ticket);
                                                    isCorrespondingTicket(createdPublication, publication.ticket);
                                                });

                                                // Requesting the publications with the Cam user as an author should be decorated with their corresponding tickets when using the global admin
                                                RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
                                                    assert.ok(!err);
                                                    PublicationsRestAPI.getPublications(ctx, camUser.user.id, null, null, function(err, data) {
                                                        assert.ok(!err);
                                                        assert.equal(data.results.length, 2);
                                                        _.each(data.results, function(publication) {
                                                            var createdPublication = _.find(createdPublications, function(createdPublication) { return createdPublication.id === publication.id; });
                                                            assert.ok(createdPublication);
                                                            isValidTicket(publication.ticket);
                                                            isCorrespondingTicket(createdPublication, publication.ticket);
                                                        });
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that requested publications are decorated with their corresponding tickets
         */
        it('verify that requested publications are decorated with their corresponding tickets', function(callback) {

            // Create a new user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, camUserA, camUserB) {
                assert.ok(!err);

                // Store the created publications
                var createdPublications = [];

                // Create a new publication
                PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'displayName A', PublicationsConstants.publicationTypes.OTHER, 1388676959000, ['author A', camUserA.user.id], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication);
                    createdPublications.push(data.publication);

                    // Create a new publication
                    PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'displayName B', PublicationsConstants.publicationTypes.OTHER, 1388676959000, ['author A', camUserA.user.id, camUserB.user.id], null, null, function(err, data, result) {
                        assert.ok(!err);
                        assert.ok(data.publication);
                        createdPublications.push(data.publication);

                        // Create a new publication
                        PublicationsRestAPI.createPublication(camAdminRestContext, [generateRandomSourceId()], 'displayName C', PublicationsConstants.publicationTypes.OTHER, 1388676959000, ['author A', camUserB.user.id], null, null, function(err, data, result) {
                            assert.ok(!err);
                            assert.ok(data.publication);
                            createdPublications.push(data.publication);

                            // Request the publications for camUserA
                            PublicationsRestAPI.getPublications(camAdminRestContext, camUserA.user.id, null, 10, function(err, data) {
                                assert.ok(!err);
                                assert.equal(data.results.length, 2);
                                _.each(data.results, function(publication) {
                                    var createdPublication = _.find(createdPublications, function(createdPublication) { return createdPublication.id === publication.id; });
                                    assert.ok(createdPublication);
                                    isValidTicket(publication.ticket);
                                    isCorrespondingTicket(createdPublication, publication.ticket);
                                });

                                // Request the publications for camUserB
                                PublicationsRestAPI.getPublications(camAdminRestContext, camUserB.user.id, null, 10, function(err, data) {
                                    assert.ok(!err);
                                    assert.equal(data.results.length, 2);
                                    _.each(data.results, function(publication) {
                                        var createdPublication = _.find(createdPublications, function(createdPublication) { return createdPublication.id === publication.id; });
                                        assert.ok(createdPublication);
                                        isValidTicket(publication.ticket);
                                        isCorrespondingTicket(createdPublication, publication.ticket);
                                    });
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#getPublicationsByCreator()', function() {

        /**
         * Test that verifies that requesting a set of publications are only decorated with their corresponding ticket for authorized users
         */
        it('verify that requested publications by creator are only decorated with their corresponding ticket for authorized users', function(callback) {

            // Create a new user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, camUser) {
                assert.ok(!err);

                // Store the created publications
                var createdPublications = [];

                // Create a new publication
                PublicationsRestAPI.createPublication(camUser.restContext, [generateRandomSourceId()], 'displayName A', PublicationsConstants.publicationTypes.OTHER, 1388676959000, ['author A'], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication);
                    createdPublications.unshift(data.publication);

                    // Create a new publication
                    PublicationsRestAPI.createPublication(camUser.restContext, [generateRandomSourceId()], 'displayName B', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [camUser.user.id], null, null, function(err, data, result) {
                        assert.ok(!err);
                        assert.ok(data.publication);
                        createdPublications.unshift(data.publication);

                        // Create a new publication
                        PublicationsRestAPI.createPublication(camUser.restContext, [generateRandomSourceId()], 'displayName C', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [camUser.user.id], null, null, function(err, data, result) {
                            assert.ok(!err);
                            assert.ok(data.publication);
                            createdPublications.unshift(data.publication);

                            // Requesting the publications created by the Cam user should NOT be decorated with their corresponding tickets when using the anonymous user
                            PublicationsRestAPI.getPublicationsByCreator(anonymousRestContext, camUser.user.id, null, null, function(err, data) {
                                assert.ok(!err);
                                assert.equal(data.results.length, 3);
                                _.each(data.results, function(publication, i) {
                                    assert.ok(!publication.ticket);
                                    assert.strictEqual(publication.ticket, undefined);
                                });

                                // Requesting the publications created by the Cam user should NOT be decorated with their corresponding tickets when using the GT tenant admin
                                PublicationsRestAPI.getPublicationsByCreator(gtAdminRestContext, camUser.user.id, null, null, function(err, data) {
                                    assert.ok(!err);
                                    assert.equal(data.results.length, 3);
                                    _.each(data.results, function(publication, i) {
                                        assert.ok(!publication.ticket);
                                        assert.strictEqual(publication.ticket, undefined);
                                    });

                                    // Requesting the publications created by the Cam user should NOT be decorated with their corresponding tickets when using the Hal user
                                    PublicationsRestAPI.getPublicationsByCreator(halUser.restContext, camUser.user.id, null, null, function(err, data) {
                                        assert.ok(!err);
                                        assert.equal(data.results.length, 3);
                                        _.each(data.results, function(publication, i) {
                                            assert.ok(!publication.ticket);
                                            assert.strictEqual(publication.ticket, undefined);
                                        });

                                        // Requesting the publications created by the Cam user should be decorated with their corresponding tickets when using the Cam user
                                        PublicationsRestAPI.getPublicationsByCreator(camUser.restContext, camUser.user.id, null, null, function(err, data) {
                                            assert.ok(!err);
                                            assert.equal(data.results.length, 3);
                                            _.each(data.results, function(publication, i) {
                                                var createdPublication = _.find(createdPublications, function(createdPublication) { return createdPublication.id === publication.id; });
                                                assert.ok(createdPublication);
                                                isValidTicket(publication.ticket);
                                                isCorrespondingTicket(createdPublication, publication.ticket);
                                            });

                                            // Requesting the publications created by the Cam user should be decorated with their corresponding tickets when using the tenant admin
                                            PublicationsRestAPI.getPublicationsByCreator(camAdminRestContext, camUser.user.id, null, null, function(err, data) {
                                                assert.ok(!err);
                                                assert.equal(data.results.length, 3);
                                                _.each(data.results, function(publication) {
                                                    var createdPublication = _.find(createdPublications, function(createdPublication) { return createdPublication.id === publication.id; });
                                                    assert.ok(createdPublication);
                                                    isValidTicket(publication.ticket);
                                                    isCorrespondingTicket(createdPublication, publication.ticket);
                                                });

                                                // Requesting the publications created by the Cam user should be decorated with their corresponding tickets when using the global admin
                                                RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
                                                    assert.ok(!err);
                                                    PublicationsRestAPI.getPublicationsByCreator(ctx, camUser.user.id, null, null, function(err, data) {
                                                        assert.ok(!err);
                                                        assert.equal(data.results.length, 3);
                                                        _.each(data.results, function(publication) {
                                                            var createdPublication = _.find(createdPublications, function(createdPublication) { return createdPublication.id === publication.id; });
                                                            assert.ok(createdPublication);
                                                            isValidTicket(publication.ticket);
                                                            isCorrespondingTicket(createdPublication, publication.ticket);
                                                        });
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the requested publications are decorated with their corresponding tickets
         */
        it('verify that requested publications are decorated with their corresponding tickets', function(callback) {

            // Create a new user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, coenegoUser, halUser) {
                assert.ok(!err);

                // Store the created publications
                var createdPublications = [];

                // Create a new publication
                PublicationsRestAPI.createPublication(coenegoUser.restContext, [generateRandomSourceId()], 'displayName A', PublicationsConstants.publicationTypes.OTHER, 1388676959000, ['author A'], null, null, function(err, data1, result) {
                    assert.ok(!err);
                    assert.ok(data1.publication);
                    createdPublications.push(data1.publication);

                    // Create a new publication
                    PublicationsRestAPI.createPublication(halUser.restContext, [generateRandomSourceId()], 'displayName B', PublicationsConstants.publicationTypes.OTHER, 1388676959000, ['author B'], null, null, function(err, data2, result) {
                        assert.ok(!err);
                        assert.ok(data2.publication);
                        createdPublications.push(data2.publication);

                        // Requesting the publications created by the Cam user should be decorated with their corresponding tickets when using the tenant admin
                        PublicationsRestAPI.getPublicationsByCreator(camAdminRestContext, coenegoUser.user.id, null, null, function(err, data1) {
                            assert.ok(!err);
                            assert.equal(data1.results.length, 1);
                            var createdPublication = _.find(createdPublications, function(createdPublication) { return createdPublication.id === data1.results[0].id; });
                            assert.ok(createdPublication);
                            isValidTicket(data1.results[0].ticket);
                            isCorrespondingTicket(createdPublication, data1.results[0].ticket);

                            // Requesting the publications created by the Cam user should be decorated with their corresponding tickets when using the tenant admin
                            PublicationsRestAPI.getPublicationsByCreator(camAdminRestContext, coenegoUser.user.id, null, null, function(err, data2) {
                                assert.ok(!err);
                                assert.equal(data2.results.length, 1);
                                var createdPublication = _.find(createdPublications, function(createdPublication) { return createdPublication.id === data2.results[0].id; });
                                assert.ok(createdPublication);
                                isValidTicket(data2.results[0].ticket);
                                isCorrespondingTicket(createdPublication, data2.results[0].ticket);
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });
});
