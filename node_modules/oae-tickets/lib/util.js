/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var ShortId = require('shortid');

var AuthzUtil = require('oae-authz/lib/util');
var Cassandra = require('oae-util/lib/cassandra');

var PublicationTicket = require('./model').PublicationTicket;
var Ticket = require('./model').Ticket;

 /**
 * Generates a new ticket ID.
 *
 * @param  {String}     tenantAlias     The tenant alias for the ticket
 * @return {String}                     The new ticket ID
 * @api private
 */
var generateTicketId = module.exports.generateTicketId = function(tenantAlias) {
    return AuthzUtil.toId('t', tenantAlias, ShortId.generate());
};

/**
 * Converts a Cassandra row to a `PublicationTicket` object
 *
 * @param  {Row}                    row     The Cassandra row to convert
 * @return {PublicationTicket}              Object that represents a publication ticket
 */
var rowToPublicationTicket = module.exports.rowToPublicationTicket = function(row) {
    var hash = Cassandra.rowToHash(row);
    return new PublicationTicket(hash.publicationId, hash.ticketId);
};

/**
 * Creates a collection of ticket ID's from a set of Cassandra rows
 *
 * @param  {Row[]}                  rows    A collection of Cassandra rows
 * @return {PublicationTicket[]}            A collection of converted publication ticket objects
 */
var rowsToPublicationTickets = module.exports.rowsToPublicationTickets = function(rows) {
    var tickets = [];
    _.each(rows, function(row) {
        var ticket = rowToPublicationTicket(row);
        tickets.push(ticket);
    });
    return tickets;
};

/**
 * Creates a ticket object from a Cassandra row
 *
 * @param  {Row}        row     Cassandra Row
 * @return {Ticket}             Converted ticket object
 */
var rowToTicket = module.exports.rowToTicket = function(row) {
    var hash = Cassandra.rowToHash(row);
    var ticket = new Ticket(hash.ticketId, hash.externalId, hash.tenantAlias, hash.publicationId, hash.createdBy, hash.created, hash.lastModified, hash.status);
    return ticket;
};

/**
 * Creates a collection of ticket objects from a set of Cassandra rows
 *
 * @param  {Row[]}      rows    A collection of Cassandra rows
 * @return {Ticket[]}           A collection of converted ticket objects
 */
var rowsToTickets = module.exports.rowsToTickets = function(rows) {
    var tickets = [];
    _.each(rows, function(row) {
        var ticket = rowToTicket(row);
        tickets.push(ticket);
    });
    return tickets;
};
