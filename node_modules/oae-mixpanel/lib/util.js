/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var MixpanelExporter = require('mixpanel-data-export');
var moment = require('moment');
var util = require('util');

var log = require('oae-logger').logger('oae-mixpanel');

/**
 * Given a context, get some basic parameters that can be sent to Mixpanel.
 * By default these are:
 *  - The tenant on which the event was triggered,
 *  - The id of the user who triggered the action (`anonymous` if the user is anonymous)
 *
 * @param  {Context}    ctx     The context with which the event was triggered
 */
var getBasicParameters = module.exports.getBasicParameters = function(ctx) {
    var params = {};

    // Keep track of the tenant the event occurred on
    params['tenant'] = ctx.tenant().alias;

    // Keep track of who triggered the event
    params['distinct_id'] = (ctx.user()) ? ctx.user().id : 'anonymous';

    // Keep track of the visibility of the user who triggered the event
    if (ctx.user()) {
        params['userVisibility'] = ctx.user().visibility;
    }

    return params;
};

/**
 * Listen for an event `eventName` on the given `api`. The event will be propagated
 * to a given `callback` in a new process tick, so any errors that get thrown in the
 * callback don't have a negative impact on the request cycle that triggered the event
 *
 * @param  {Object}         api             The api on which to listen for events
 * @param  {String}         eventName       The name of the event
 * @param  {Function}       callback        Standard callback function
 */
var listen = module.exports.listen = function(api, eventName, callback) {
    api.on(eventName, function() {
        var args = arguments;
        var that = this;
        process.nextTick(function() {
            try {
                return callback.apply(that, args);
            } catch (err) {
                log().error({'err': err}, 'An error occurred when tracking an event with mixpanel');
            }
        });
    });
};


//////////////
// EXPORTER //
//////////////

/**
 * Create a MixPanel exporter
 *
 * @param  {Object}         config      Object containing the MixPanel configuration
 * @return {Exporter}                   A MixPanel exporter object
 */
var createExporter = module.exports.createExporter = function(config) {
    return new MixpanelExporter({
        'api_key': config.apikey,
        'api_secret': config.apisecret
    });
};

/**
 * Create a request options object
 * @see https://mixpanel.com/docs/api-documentation/data-export-api
 *
 * @param  {String}     eventName   The event to return the stats for. (e.g. userLoggedIn)
 * @param  {String}     alias       The alias of the tenant to get the stats for
 * @param  {Object}     params      Object containing custom parameters to override the defaults
 * @return {Object}                 The request options object
 */
var createRequestOptionsObject = module.exports.createRequestOptionsObject = function(eventName, alias, params) {
    params = params || {};

    // Basic request options object to send to MixPanel
    var options = {
        'from_date': _getStartDate(),
        'to_date': moment.utc(Date.now()).format('YYYY-MM-DD'),
        'event': eventName
    };

    // Extend the basic object with custom params
    _.extend(options, params);

    // Narrow down the results if a tenant was specified
    if (alias) {
        _.extend(options, {
            'where': util.format('"%s" == properties["tenant"]', alias)
        });
    }

    return options;
};

/**
 * Return the start date
 *
 * @param  {Number}     [startMillis]   The current date since epoch time
 * @return {String}                     The start date in ISO 8601 format. (e.g. 2015-07-01)
 * @api private
 */
var _getStartDate = function(startMillis) {
    startMillis = startMillis || Date.now();
    return moment(startMillis).date(1).utc().format('YYYY-MM-DD');
};
