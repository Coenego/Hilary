/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Cassandra = require('oae-util/lib/cassandra');

var SymplecticIngester = require('./ingesters/symplectic/ingester');

module.exports = function(config, callback) {
    ensureSchema(function(err) {
        if (err) {
            return callback(err);
        }

        SymplecticIngester.refreshConfiguration(config, callback);
    });
};

/**
 * Ensure that the all of the publications-related schemas are created. If they already exist, this method will not do anything.
 *
 * @param  {Function}    callback       Invoked when the process completes
 * @param  {Object}      callback.err   Error object, containing the error message if any
 * @api private
 */
var ensureSchema = function(callback) {
    Cassandra.createColumnFamilies({
        // We can't use a `timestamp` type for the `date` column as that only supports dates since epoch. Some publications will be earlier than that date
        'Publications': 'CREATE TABLE "Publications" ("publicationId" text PRIMARY KEY, "tenantAlias" text, "createdBy" text, "displayName" text, "publicationType" text, "date" bigint, "linkedContentId" text, "thumbnailUri" text, "publisher" text, "openAccessType" text, "journalName" text, "issueNumber" text, "pageBegin" text, "pageEnd" text, "department" text, "contactEmail" text, "useCambridgeAddendum" text, "comments" text, "acceptanceDate" bigint)',
        'PublicationsBySource': 'CREATE TABLE "PublicationsBySource" ("sourceId" text PRIMARY KEY, "publicationId" text)',
        'PublicationsByUser': 'CREATE TABLE "PublicationsByUser" ("userId" text, "publicationId" text, "value" text, PRIMARY KEY ("userId", "publicationId")) WITH COMPACT STORAGE',
        'PublicationsByCreator': 'CREATE TABLE "PublicationsByCreator" ("userId" text, "publicationId" text, "value" text, PRIMARY KEY ("userId", "publicationId")) WITH COMPACT STORAGE',
        'PublicationsAuthors': 'CREATE TABLE "PublicationsAuthors" ("publicationId" text, "author" text, "value" text, PRIMARY KEY ("publicationId", "author")) WITH COMPACT STORAGE',
        'PublicationsFunders': 'CREATE TABLE "PublicationsFunders" ("publicationId" text, "funder" text, PRIMARY KEY ("publicationId", "funder")) WITH COMPACT STORAGE',
        'PublicationsRatings': 'CREATE TABLE "PublicationsRatings" ("publicationId" text, "rating" counter, "ratings" counter, PRIMARY KEY ("publicationId")) WITH COMPACT STORAGE',
        'PublicationsRatingsByUser': 'CREATE TABLE "PublicationsRatingsByUser" ("publicationId" text, "userId" text, PRIMARY KEY ("publicationId", "userId")) WITH COMPACT STORAGE'
    }, callback);
};
