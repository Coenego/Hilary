/*
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

var MixPanelAPI = require('oae-mixpanel/lib/api');
var MixPanelTestUtil = require('oae-mixpanel/lib/test/util');

describe('MixPanel', function() {

    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as an anonymous user on the global admin tenant
    var anonymousGlobalRestContext = null;
    // Rest context that can be used every time we need to make a request as a cam tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousCamRestContext = null;

    /**
     * Initializes the REST contexts
     */
    before(function() {
        // Fill up the global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        // Fill up the anonymous global rest context
        anonymousGlobalRestContext = TestsUtil.createGlobalRestContext();
        // Fill up the cam admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        // Fill up anonymous rest context
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
    });

    /**
     * Enable MixPanel before each test
     */
    beforeEach(function() {
        MixPanelAPI.setMixPanelEnabledStatus(true);
    });

    /**
     * Disable MixPanel when all the tests are ran
     */
    after(function() {
        MixPanelAPI.setMixPanelEnabledStatus(false);
    });

    describe('Content', function() {

        describe('#getUploadedFilesFileSize()', function() {

            /**
             * Test that verifies that an error is thrown when stats are requested and MixPanel is disabled
             */
            it('verify that an error is thrown when stats are requested and MixPanel is disabled', function(callback) {

                // Disable MixPanel
                MixPanelAPI.setMixPanelEnabledStatus(false);

                // Verify that an error is thrown when a user request the stats when MixPanel is disabled
                RestAPI.MixPanel.getUploadedFilesFileSize(globalAdminRestContext, function(err, data) {
                    assert.ok(err);
                    assert.equal(err.code, 403);
                    callback();
                });
            });

            /**
             * Test that verifies that stats can only be requested by administrators
             */
            it('verify that only administrators can request stats', function(callback) {

                // Verify that anonymous users are not allowed to request stats on the admin router
                RestAPI.MixPanel.getUploadedFilesFileSize(anonymousGlobalRestContext, function(err, data) {
                    assert.ok(err);
                    assert.equal(err.code, 401);

                    // Verify that anonymous users are not allowed to request stats on the tenant router
                    RestAPI.MixPanel.getUploadedFilesFileSize(anonymousCamRestContext, function(err, data) {
                        assert.ok(err);
                        assert.equal(err.code, 401);

                        // Create a test user
                        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                            assert.ok(!err);
                            user = _.values(user)[0];

                            // Verify that normal user are not allowed to request stats
                            RestAPI.MixPanel.getUploadedFilesFileSize(user.restContext, function(err, data) {
                                assert.ok(err);
                                assert.equal(err.code, 401);

                                // Verify that administrators are allowed to request stats
                                MixPanelTestUtil.mockRequests();
                                RestAPI.MixPanel.getUploadedFilesFileSize(camAdminRestContext, function(err, data) {
                                    assert.ok(!err);

                                    // Verify that administrators are allowed to request stats
                                    MixPanelTestUtil.mockRequests();
                                    RestAPI.MixPanel.getUploadedFilesFileSize(globalAdminRestContext, function(err, data) {
                                        assert.ok(!err);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('#getUploadedFilesFileSizeForTenant()', function() {

            /**
             * Test that verifies that an error is thrown when stats are requested and MixPanel is disabled
             */
            it('verify that an error is thrown when stats are requested and MixPanel is disabled', function(callback) {

                // Disable MixPanel
                MixPanelAPI.setMixPanelEnabledStatus(false);

                // Verify that an error is thrown when a user request the stats when MixPanel is disabled
                RestAPI.MixPanel.getUploadedFilesFileSizeForTenant(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, data) {
                    assert.ok(err);
                    assert.equal(err.code, 403);
                    callback();
                });
            });

            /**
             * Test that verifies that stats can only be requested by global administrators
             */
            it('verify that only global administrators can request stats for a specific tenant', function(callback) {

                // Verify that anonymous users are not allowed to request stats on the admin router
                RestAPI.MixPanel.getUploadedFilesFileSizeForTenant(anonymousGlobalRestContext, global.oaeTests.tenants.cam.alias, function(err, data) {
                    assert.ok(err);
                    assert.equal(err.code, 401);

                    // Verify that administrators are allowed to request stats
                    MixPanelTestUtil.mockRequests();
                    RestAPI.MixPanel.getUploadedFilesFileSizeForTenant(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, data) {
                        assert.ok(!err);
                        callback();
                    });
                });
            });
        });
    });
});
