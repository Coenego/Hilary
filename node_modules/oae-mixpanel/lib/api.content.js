/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var Validator = require('oae-util/lib/validator').Validator;

var MixPanelUtil = require('./util');

/**
 * Get the total size of uploaded files for the current month for all tenants
 * or the current tenant, depending on the used router.
 * @see https://mixpanel.com/docs/api-documentation/data-export-api
 *
 *  * Exporter return example:
 *  *
 *  *   {
 *  *       status: "ok",
 *  *       results: {
 *  *           2015-07-29: 2489,
 *  *           2015-07-30: 2989176,
 *  *           2015-07-31: 670234
 *  *       }
 *  *   }
 *
 * @param  {Context}    ctx                 Standard context object containing the current user and the current tenant
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {Object}     callback.stats      Object containing the stats for the tenant(s)
 */
var getUploadedFilesFileSize = module.exports.getUploadedFilesFileSize = function(ctx, callback) {
    var mixPanelConfig = require('../../../config').config.mixpanel;
    if (!mixPanelConfig.enabled) {
        return callback({'code': 403, 'msg': 'MixPanel is not enabled'});
    } else if (!ctx.user() || !ctx.user().isAdmin(ctx.tenant().alias)) {
        return callback({'code': 401, 'msg': 'Only administrators can request stats'});
    }

    // Return the unique users for a specific tenant if the endpoint was accessed on the tenant router
    var alias = null;
    if (!ctx.tenant().isGlobalAdminServer) {
        alias = ctx.tenant().alias;
    }

    // Request options object
    var options = MixPanelUtil.createRequestOptionsObject('createdContent', alias, {
        'on': 'properties["filesize"]'
    });

    // Request the data from the MixPanel API
    var exporter = MixPanelUtil.createExporter(mixPanelConfig);
    exporter.sumSegmentation(options, function(data) {
        if (data.error) {
            return callback({'code': 400, 'msg': data.error});
        }

        return callback(null, data);
    });
};

/**
 * Get the total size of uploaded files for the current month for a specific tenant
 * @see https://mixpanel.com/docs/api-documentation/data-export-api
 *
 *  * Exporter return example:
 *  *
 *  *   {
 *  *       status: "ok",
 *  *       results: {
 *  *           2015-07-29: 0,
 *  *           2015-07-30: 0,
 *  *           2015-07-31: 670234
 *  *       }
 *  *   }
 *
 * @param  {Context}    ctx                 Standard context object containing the current user and the current tenant
 * @param  {String}     alias               The alias of the tenant to get the stats for
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {Object}     callback.stats      Object containing the stats for the tenant
 */
var getUploadedFilesFileSizeForTenant = module.exports.getUploadedFilesFileSizeForTenant = function(ctx, alias, callback) {
    var mixPanelConfig = require('../../../config').config.mixpanel;
    if (!mixPanelConfig.enabled) {
        return callback({'code': 403, 'msg': 'MixPanel is not enabled'});
    } else if (!ctx.user() || !ctx.user().isAdmin(ctx.tenant().alias)) {
        return callback({'code': 401, 'msg': 'Only global administrators can request stats'});
    }

    // Perform some basic validation
    var validator = new Validator();
    validator.check(alias, {'code': 400, 'msg': 'Missing alias'}).notEmpty();
    validator.check(alias, {'code': 400, 'msg': 'The tenant alias should not contain a space'}).notContains(' ');
    validator.check(alias, {'code': 400, 'msg': 'The tenant alias should not contain a colon'}).notContains(':');
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Request options object
    var options = MixPanelUtil.createRequestOptionsObject('createdContent', alias, {
        'on': 'properties["filesize"]'
    });

    // Request the data from the MixPanel API
    var exporter = MixPanelUtil.createExporter(mixPanelConfig);
    exporter.sumSegmentation(options, function(data) {
        if (data.error) {
            return callback({'code': 400, 'msg': data.error});
        }

        return callback(null, data);
    });
};
