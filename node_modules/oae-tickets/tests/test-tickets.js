/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');

var ConfigTestUtil = require('oae-config/lib/test/util');
var PublicationsAPI = require('oae-publications');
var PublicationsConstants = require('oae-publications/lib/constants').PublicationsConstants;
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

var TicketsConstants = require('../lib/constants').TicketsConstants;
var TicketsDAO = require('../lib/internal/dao');
var TicketsUtil = require('../lib/util');

describe('Tickets', function() {

    // Rest context that can be used every time we need to make a reqeust as a global admin
    var globalAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a cam tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a gt tenant admin
    var gtAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // User object that can be used every time we need user specific data
    var coenegoUser = null;
    var halUser = null;

    /**
     * Initializes the admin/user REST contexts
     */
    before(function(callback) {

        // Fill up the global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        // Fill up the cam admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the gt admin rest context
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        // Fill up the anonymous rest context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the coenego and hal user rest context
        TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, camUsers, _coenegoUser, _halUser) {
            assert.ok(!err);
            assert.ok(camUsers);
            assert.ok(_coenegoUser);
            assert.ok(_halUser);
            coenegoUser = _coenegoUser;
            halUser = _halUser;
            callback();
        });
    });

    /**
     * Disabled the tickets module before each test
     */
    beforeEach(function(callback) {
        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-tickets/general/enabled': false}, function(err) {
            assert.ok(!err);
            return callback();
        });
    });

    /**
     * Generates a random source Id
     *
     * @return {String} A random string that can be used as a source id
     */
    var generateRandomSourceId = function() {
        return 'mendeley#' + TestsUtil.generateRandomText();
    };

    /**
     * Utility method that returns a stream that points to a PDF
     *
     * @return {Stream}     A stream that points to a PDF that can be uploaded
     */
    var getFileStream = function() {
        var file = __dirname + '/data/paper.pdf';
        return fs.createReadStream(file);
    };

    describe('#createTicket()', function(callback) {

        /**
         * Test that verifies that creating tickets is only allowed when enabled
         */
        it('verify creating tickets is only allowed when enabled', function(callback) {
            RestAPI.Tickets.createTicket(camAdminRestContext, {'publicationId': 'p:camtest:0123456789'}, function(err, ticket) {
                assert.ok(err);
                assert.equal(err.code, 401);
                assert.ok(!ticket);

                RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
                    assert.ok(!err);

                    RestAPI.Tickets.createTicket(ctx, {'publicationId': 'p:camtest:0123456789'}, function(err, ticket) {
                        assert.ok(err);
                        assert.equal(err.code, 401);
                        assert.ok(!ticket);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that creating a ticket cannot be done by anonymous users
         */
        it('verify only authorized users and admins can create tickets', function(callback) {

            // Enable the tickets module for the tenant
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                RestAPI.Tickets.createTicket(anonymousRestContext, {'publicationId': 'p:camtest:0123456789'}, function(err, ticket) {
                    assert.ok(err);
                    assert.equal(err.code, 401);

                    RestAPI.Tickets.createTicket(coenegoUser.restContext, {'publicationId': 'p:camtest:0123456789'}, function(err, ticket) {
                        assert.ok(err);
                        assert.notEqual(err.code, 401);

                        RestAPI.Tickets.createTicket(camAdminRestContext, {'publicationId': 'p:camtest:0123456789'}, function(err, ticket) {
                            assert.ok(err);
                            assert.notEqual(err.code, 401);

                            RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
                                assert.ok(!err);

                                RestAPI.Tickets.createTicket(ctx, {'publicationId': 'p:camtest:0123456789'}, function(err, ticket) {
                                    assert.ok(err);
                                    assert.notEqual(err.code, 401);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies an error is thrown when entering an invalid publication ID
         */
        it('verify parameters', function(callback) {

            // Enable the tickets module for the tenant
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                // Create a new ticket with an invalid publication ID
                RestAPI.Tickets.createTicket(camAdminRestContext, {'publicationId': 'invalid_publication_id'}, function(err, ticket) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    assert.ok(!ticket);

                    // Create a new ticket with an invalid publication ID
                    RestAPI.Tickets.createTicket(globalAdminRestContext, {'tenantAlias': global.oaeTests.tenants.cam.alias, 'publicationId': 'invalid_publication_id'}, function(err, ticket) {
                        assert.ok(err);
                        assert.equal(err.code, 400);
                        assert.ok(!ticket);

                        // Create a new ticket with an unexisting publication ID
                        RestAPI.Tickets.createTicket(camAdminRestContext, {'publicationId': 'p:camtest:0123456789'}, function(err, ticket) {
                            assert.ok(err);
                            assert.equal(err.code, 404);
                            assert.ok(!ticket);

                            RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
                                assert.ok(!err);

                                // Create a new ticket with an invalid publication ID
                                RestAPI.Tickets.createTicket(ctx, {'tenantAlias': global.oaeTests.tenants.cam.alias, 'publicationId': 'p:camtest:0123456789'}, function(err, ticket) {
                                    assert.ok(err);
                                    assert.equal(err.code, 404);
                                    assert.ok(!ticket);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies uploading an article creates a new ticket
         */
        it('verify creating a new publication creates a new ticket', function(callback) {

            // Enable the tickets module for the tenant
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                // Create a new publication
                RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication);
                    assert.ok(data.publication.ticket);
                    assert.equal(data.publication.ticket.publicationId, data.publication.id);
                    assert.equal(data.publication.ticket.createdBy, data.publication.createdBy);
                    assert.equal(data.publication.ticket.tenantAlias, global.oaeTests.tenants.cam.alias);

                    RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
                        assert.ok(!err);

                        // Create a new publication
                        RestAPI.Publications.createPublication(ctx, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                            assert.ok(!err);
                            assert.ok(data.publication);
                            assert.ok(data.publication.ticket);
                            assert.equal(data.publication.ticket.publicationId, data.publication.id);
                            assert.equal(data.publication.ticket.createdBy, data.publication.createdBy);
                            assert.equal(data.publication.ticket.tenantAlias, 'localhost');
                            return callback();
                        });
                    });
                });
            });
        });

        it('verify creating tickets on different tenants doesn\'t cause conflicts with the external ID\'s', function(callback) {

            // Enable the tickets module for the tenant
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                // Create a new tenant
                var tenantAlias = TestsUtil.generateRandomText(1);
                TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenantAdminRestContext) {
                    assert.ok(!err);

                    // Create a new publication
                    RestAPI.Publications.createPublication(tenantAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.id], null, null, function(err, data1, result) {
                        assert.ok(!err);
                        assert.ok(data1.publication);

                        // Create a new tenant
                        tenantAlias = TestsUtil.generateRandomText(1);
                        TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenantAdminRestContext) {
                            assert.ok(!err);

                            // Create a new publication
                            RestAPI.Publications.createPublication(tenantAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.id], null, null, function(err, data2, result) {
                                assert.ok(!err);
                                assert.ok(data2.publication);

                                // Ensure the external ID's are not equal
                                assert.notEqual(data1.publication.ticket.externalId, data2.publication.ticket.externalId);
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#getTicket()', function(callback) {

        /**
         * Test that verifies that requesting tickets is only allowed for authorized administrators
         */
        it('verify permissions', function(callback) {

            // Enable the tickets module for the tenant
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                // Create a new publication
                RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication);
                    assert.ok(data.publication.ticket);

                    // Requesting the ticket with an anonymous user should throw an error
                    RestAPI.Tickets.getTicket(anonymousRestContext, data.publication.ticket.ticketId, function(err, ticket) {
                        assert.ok(err);
                        assert.equal(err.code, 401);

                        // Requesting the ticket with an admin from another tenant should throw an error
                        RestAPI.Tickets.getTicket(gtAdminRestContext, data.publication.ticket.ticketId, function(err, ticket) {
                            assert.ok(err);
                            assert.equal(err.code, 401);

                            // Requesting the ticket with a regular user should throw an error
                            RestAPI.Tickets.getTicket(halUser.restContext, data.publication.ticket.ticketId, function(err, ticket) {
                                assert.ok(err);
                                assert.equal(err.code, 401);

                                // Requesting the ticket by an admin from the same tenant as where the ticket was created in should always be possible
                                RestAPI.Tickets.getTicket(camAdminRestContext, data.publication.ticket.ticketId, function(err, ticket) {
                                    assert.ok(!err);

                                    RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
                                        assert.ok(!err);

                                        // Requesting the ticket by global admininstrator should always be possible
                                        RestAPI.Tickets.getTicket(ctx, data.publication.ticket.ticketId, function(err, ticket) {
                                            assert.ok(!err);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies if a valid ticket ID is specified
         */
        it('verify parameters', function(callback) {

            // Enable tickets module for tenant
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                // Requesting a ticket with a mallformed identifier should return an error
                RestAPI.Tickets.getTicket(camAdminRestContext, 'invalid_ticket_id', function(err, ticket) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    assert.equal(err.msg, 'A valid ticket ID must be provided');

                    // Requesting a ticket with an unexisting identifier should return an error
                    RestAPI.Tickets.getTicket(camAdminRestContext, 't:camtest:0123456789', function(err, ticket) {
                        assert.ok(err);
                        assert.equal(err.code, 404);
                        assert.equal(err.msg, 'The requested ticket was not found');
                        assert.equal(ticket, null);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies requesting a specific ticket is successful
         */
        it('verify requesting an existig ticket is successful', function(callback) {

            // Enable tickets module for tenant
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                // Create a new publication
                RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication);
                    assert.ok(data.publication.ticket);

                    // Request the created ticket
                    RestAPI.Tickets.getTicket(camAdminRestContext, data.publication.ticket.ticketId, function(err, ticket) {
                        assert.ok(!err);
                        assert.equal(data.publication.id, ticket.publicationId);
                        assert.equal(data.publication.ticket.ticketId, ticket.ticketId);
                        assert.equal(data.publication.ticket.externalId, ticket.externalId);
                        assert.equal(data.publication.ticket.tenantAlias, ticket.tenantAlias);
                        assert.equal(data.publication.ticket.publicationId, ticket.publicationId);
                        assert.equal(data.publication.ticket.created, ticket.created);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies requesting a ticket by a publication ID is successful
         */
        it('verify requesting a ticket by a publication ID is successful', function(callback) {

            // Enable tickets module for tenant
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                // Create a new publication
                RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication);
                    assert.ok(data.publication.ticket);

                    // Request the ticket by the publication ID
                    TicketsDAO.getTicketsByPublicationIds([data.publication.id], function(err, tickets) {
                        assert.ok(!err);
                        assert.equal(tickets.length, 1);
                        assert.equal(tickets[0].ticketId, data.publication.ticket.ticketId);
                        return callback();
                    });
                });
            });
        });
    });

    describe('#getTickets()', function(callback) {

        /**
         * Test that verifies that only authorized users can request tickets
         */
        it('verify permissions', function(callback) {

            // Enable tickets module for tenant
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                // Create a new publication
                RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                    assert.ok(!err);
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that valid parameters are specified when requesting multiple tickets
         */
        it('verify parameters', function(callback) {

            // Enable tickets module for tenant
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                // Create a new publication
                RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication);
                    assert.ok(data.publication.ticket);
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that requesting a collection of tickets by their ID is successful
         */
        it('verify requesting a collection of tickets by their ID is successful', function(callback) {

            // Enable tickets module for tenant
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                // Store the created tickets locally to compare them afterwards
                var createdTickets = [];

                // Create a new publication
                RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication);
                    assert.ok(data.publication.ticket);
                    createdTickets.push(data.publication.ticket);

                    // Create a new publication
                    RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                        assert.ok(!err);
                        assert.ok(data.publication);
                        assert.ok(data.publication.ticket);
                        createdTickets.push(data.publication.ticket);

                        // Create a new publication
                        RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                            assert.ok(!err);
                            assert.ok(data.publication);
                            assert.ok(data.publication.ticket);
                            createdTickets.push(data.publication.ticket);

                            var ticketIds = _.map(createdTickets, function(ticket) { return ticket.ticketId; });
                            RestAPI.Tickets.getTickets(camAdminRestContext, {'ticketIds' : ticketIds}, function(err, tickets) {
                                assert.ok(!err);
                                assert.ok(tickets);

                                // Loop the returned tickets and check if their values match to the created tickets
                                _.each(tickets, function(ticket, i) {
                                    assert.deepEqual(ticket, createdTickets[i]);
                                    assert.equal(tickets.length, createdTickets.length);
                                    assert.equal(ticket.ticketId, createdTickets[i].ticketId);
                                });
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies requesting a ticket by a publication ID is successful
         */
        it('verify requesting multiple tickets by their linked publication ID\'s is successful', function(callback) {

            // Enable tickets module for tenant
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                // Store the created tickets locally to compare them afterwards
                var createdPublications = [];

                // Create a new publication
                RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                    assert.ok(!err);
                    assert.ok(data.publication);
                    createdPublications.push(data.publication);

                    // Create a new publication
                    RestAPI.Publications.createPublication(camAdminRestContext, [generateRandomSourceId()], 'A displayName', PublicationsConstants.publicationTypes.OTHER, 1388676959000, [coenegoUser.user.displayName], null, null, function(err, data, result) {
                        assert.ok(!err);
                        assert.ok(data.publication);
                        createdPublications.push(data.publication);

                        // Request the tickets by their linked publication ID's
                        var publicationIds = _.map(createdPublications, function(publication) { return publication.id; });
                        TicketsDAO.getTicketsByPublicationIds(publicationIds, function(err, tickets) {
                            assert.ok(!err);
                            assert.equal(tickets.length, 2);
                            assert.equal(tickets[0].ticketId, createdPublications[0].ticket.ticketId);
                            assert.equal(tickets[1].ticketId, createdPublications[1].ticket.ticketId);
                            return callback();
                        });
                    });
                });
            });
        });
    });
});
