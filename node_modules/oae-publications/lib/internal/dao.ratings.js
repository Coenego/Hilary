/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var Cassandra = require('oae-util/lib/cassandra');
var log = require('oae-logger').logger('oae-activity');

var Rating = require('../model').Rating;

/**
 * Returns a publication rating
 *
 * @param  {String[]}       publicationIds      The IDs of the publications where the rating needs to be returned for
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        Object containing error code and error message
 * @param  {Number}         callback.rating     The current rating value of the publication
 */
var getPublicationsRatings = module.exports.getPublicationsRatings = function(publicationIds, callback) {
    Cassandra.runQuery('SELECT * FROM "PublicationsRatings" WHERE "publicationId" IN (?)', [publicationIds], function(err, rows) {
        if (err) {
            log().error({'code': 400, 'msg': err, 'publicationIds': publicationIds}, 'Error while fetching rating for publications');
            return callback(err);
        }

        // Return an empty result if the publication hasn't received a rating yet
        if (_.isEmpty(rows)) {
            return callback();
        }

        // Return the ratings
        var ratings = _rowsToRatings(rows);
        return callback(null, ratings);
    });
};

/**
 * Updates a publication rating
 *
 * @param  {String}         publicationId       The id of the publication where the rating needs to be updated for
 * @param  {Number}         rating              The rating value
 * @param  {String}         userId              The id of the user that rated the publication
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        Object containing error code and error message
 * @param  {Rating}         callback.rating     The current rating value of the publication
 */
var updatePublicationRating = module.exports.updatePublicationRating = function(publicationId, rating, userId, callback) {

    // Update the rating for the publication
    Cassandra.runQuery('UPDATE "PublicationsRatings" SET rating = rating + ?, ratings = ratings + 1 WHERE "publicationId" = ?', [rating, publicationId], function(err) {
        if (err) {
            log().error({'err': err, 'publicationId': publicationId, 'userId': userId, 'rating': rating}, 'Error while saving rating for publication');
            return callback(err);
        }

        // Link the rating to the user
        Cassandra.runQuery('INSERT INTO "PublicationsRatingsByUser" ("publicationId", "userId") VALUES (?, ?)', [publicationId, userId], function(err) {
            if (err) {
                log().error({'err': err, 'publicationId': publicationId, 'userId': userId, 'rating': rating}, 'Error while saving publication rating for user');
                return callback(err);
            }

            return callback(null, rating);
        });
    });
};

/**
 * Check whether of not a user has already rated a publication
 *
 * @param  {String[]}       publicationIds          A collection of publication IDs
 * @param  {String}         userId                  The id of the user
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            Object containing error code and error message
 * @param  {Boolean}        callback.isAllowed      Whether of not the user has already rated the publication
 */
var getUserPublicationsRatings = module.exports.getUserPublicationsRatings = function(publicationIds, userId, callback) {
    Cassandra.runQuery('SELECT "publicationId" FROM "PublicationsRatingsByUser" WHERE "publicationId" IN (?) AND "userId" = ?', [publicationIds, userId], function(err, rows) {
        if (err) {
            log().error({'code': 400, 'msg': err, 'publicationIds': publicationIds, 'ticketId': ticketId}, 'Error while fetching user publication ratings');
            return callback(err);
        }

        // Return an empty result if now records were found
        if (!_.isEmpty(rows)) {
            return callback();
        }

        publicationIds = [];
        _.each(rows, function(row) {
            var id = Cassandra.rowToHash(hash.publicationId);
            publicationIds.push(id);
        });

        // Return the matching records
        return callback(null, rows);
    });
};

/**
 * Converts a Cassandra row to a rating object
 *
 * @param  {Row}        row     A Cassandra row
 * @return {Rating}             Object representing a converted rating
 * @api private
 */
var _rowToRating = function(row) {
    var hash = Cassandra.rowToHash(row);
    return new Rating(hash.publicationId, (hash.rating / hash.ratings), hash.ratings);
};

/**
 * Creates a collection of rating objects from a set of Cassandra rows
 *
 * @param  {Row[]}      rows    A collection of Cassandra rows
 * @return {Rating[]}           A collection of converted rating objects
 * @api private
 */
var _rowsToRatings = function(rows) {
    var ratings = [];
    _.each(rows, function(row) {
        var rating = _rowToRating(row);
        ratings.push(rating);
    });
    return ratings;
};
